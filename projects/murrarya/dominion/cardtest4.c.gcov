        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:
        -:    7:#define VERBOSE 1
        -:    8:
        -:    9:typedef enum {false, true} bool;
        -:   10:
function assertTrue called 5 returned 100% blocks executed 100%
        5:   11:bool assertTrue(bool expr, char* description) {
        5:   12:	printf("%s - ", description);
call    0 returned 100%
        5:   13:	if (expr) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:   14:		printf("\x1B[32mPASSED\x1B[0m\n");
call    0 returned 100%
        -:   15:	} else {
        1:   16:		printf("\x1B[31mFAILED\x1B[0m\n");
call    0 returned 100%
        -:   17:	}
        5:   18:}
        -:   19:
function testCouncilRoom called 1 returned 100% blocks executed 100%
        1:   20:void testCouncilRoom() {
        1:   21:	int seed = 1000;
        1:   22:	int numPlayers = 2;
        1:   23:	int maxBonus = 10;
        -:   24:	struct gameState G;
        1:   25:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel,
        -:   26:				 smithy, village, baron, great_hall};
        -:   27:
        1:   28:	memset(&G, 23, sizeof(struct gameState)); // clear gameState
        1:   29:	initializeGame(numPlayers, k, seed, &G); // init a new game
call    0 returned 100%
        1:   30:	printf("\n--- TESTING COUNCIL ROOOM CARD ---\n");
call    0 returned 100%
        -:   31:
        -:   32:	int result;
        1:   33:	int preP1HandCount = G.handCount[0];
        1:   34:	int preP2HandCount = G.handCount[1];
        1:   35:	int preNumBuys = G.numBuys;
        1:   36:	int prePlayedCount = G.playedCardCount;
        1:   37:	G.hand[G.whoseTurn][0] = council_room;
        -:   38:
        1:   39:	result = cardEffect(council_room, 0, 0, 0, &G, 0, 0);
call    0 returned 100%
        1:   40:	assertTrue(result == 0, "Council room succeeds when played");
call    0 returned 100%
        1:   41:	assertTrue(G.handCount[0] == preP1HandCount + 4, "Player who played card gains 4 cards");
call    0 returned 100%
        1:   42:	assertTrue(G.numBuys = preNumBuys + 1, "Player who played card gets 1 more buy");
call    0 returned 100%
        1:   43:	assertTrue(G.handCount[1] == preP2HandCount + 1, "Other player gains 1 card");
call    0 returned 100%
        1:   44:	assertTrue(G.playedCardCount == prePlayedCount + 1, "Council room is put in played pile after being played");
call    0 returned 100%
        1:   45:}
        -:   46:
function main called 1 returned 100% blocks executed 100%
        1:   47:int main() {
        1:   48:	testCouncilRoom();
call    0 returned 100%
        1:   49:	return 0;
        -:   50:}
