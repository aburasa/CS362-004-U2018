        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:
        -:    7:#define VERBOSE 1
        -:    8:
        -:    9:typedef enum {false, true} bool;
        -:   10:
function assertTrue called 3 returned 100% blocks executed 80%
        3:   11:bool assertTrue(bool expr, char* description) {
        3:   12:	printf("%s - ", description);
call    0 returned 100%
        3:   13:	if (expr) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   14:		printf("\x1B[32mPASSED\x1B[0m\n");
call    0 never executed
        -:   15:	} else {
        3:   16:		printf("\x1B[31mFAILED\x1B[0m\n");
call    0 returned 100%
        -:   17:	}
        3:   18:}
        -:   19:
function testAdventurer called 1 returned 100% blocks executed 100%
        1:   20:void testAdventurer() {
        1:   21:	printf("\n--- TESTING ADVENTURER CARD ---\n");
call    0 returned 100%
        -:   22:	
        1:   23:	int seed = 1000;
        1:   24:	int numPlayers = 2;
        1:   25:	int maxBonus = 10;
        -:   26:	struct gameState G;
        1:   27:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel,
        -:   28:				 smithy, village, baron, great_hall};
        -:   29:
        -:   30:	
        1:   31:	memset(&G, 23, sizeof(struct gameState)); // clear gameState
        1:   32:	initializeGame(numPlayers, k, seed, &G); // init a new game
call    0 returned 100%
        -:   33:	
        1:   34:	int preHandCount = G.handCount[G.whoseTurn];
        1:   35:	int preDiscardCount = G.discardCount[G.whoseTurn];
        1:   36:	int preDeckCount = G.deckCount[G.whoseTurn];
        1:   37:	int preTreasuresInHand = 0;
        6:   38:	for (int i = 0; i < G.handCount[G.whoseTurn]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   39:		int curCard = G.hand[G.whoseTurn][i];
        5:   40:		if (curCard == copper || curCard == silver || curCard == gold) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:   41:			preTreasuresInHand++;
        -:   42:		}
        -:   43:	}
        -:   44:
        1:   45:	cardEffect(adventurer, 0, 0, 0, &G, 0, 0); // play Adventurer
call    0 returned 100%
        -:   46:	// Effect of adventurer is to draw cards until 2 treasures
        -:   47:	// are found. Thus, hand size should be increased by 2,
        -:   48:	// teasure count increased by 2, and discard pile increased
        -:   49:	// and deck pile decreased by the number of other cards 
        -:   50:	// drawn and then discarded.
        -:   51:
        1:   52:	int postHandCount = G.handCount[G.whoseTurn];
        1:   53:	int postDiscardCount = G.discardCount[G.whoseTurn];
        1:   54:	int postDeckCount = G.deckCount[G.whoseTurn];
        1:   55:	int postTreasuresInHand = 0;
        9:   56:	for (int i = 0; i < G.handCount[G.whoseTurn]; i++) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        8:   57:		int curCard = G.hand[G.whoseTurn][i];
        8:   58:		if (curCard == copper || curCard == silver || curCard == gold) {
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        7:   59:			postTreasuresInHand++;
        -:   60:		}
        -:   61:	}
        1:   62:	int numCardsDrawn = preDeckCount - postDeckCount;
        -:   63:
        1:   64:	assertTrue(postHandCount == preHandCount + 2, "Hand count inc'd by 2");
call    0 returned 100%
        1:   65:	assertTrue(postTreasuresInHand - preTreasuresInHand == 2, "2 treasures drawn");
call    0 returned 100%
        1:   66:	assertTrue(postDiscardCount - preDiscardCount == numCardsDrawn - 2, "All other cards put in discard pile");
call    0 returned 100%
        1:   67:}
        -:   68:
function main called 1 returned 100% blocks executed 100%
        1:   69:int main() {
        1:   70:	testAdventurer();
call    0 returned 100%
        1:   71:	return 0;
        -:   72:}
