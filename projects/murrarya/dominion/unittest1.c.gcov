        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:
        -:    7:#define VERBOSE 1
        -:    8:
        -:    9:typedef enum {false, true} bool;
        -:   10:
function assertTrue called 26 returned 100% blocks executed 100%
       26:   11:bool assertTrue(bool expr, char* description) {
       26:   12:	printf("%s - ", description);
call    0 returned 100%
       26:   13:	if (expr) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
       25:   14:		printf("\x1B[32mPASSED\x1B[0m\n");
call    0 returned 100%
        -:   15:	} else {
        1:   16:		printf("\x1B[31mFAILED\x1B[0m\n");
call    0 returned 100%
        -:   17:	}
       26:   18:}
        -:   19:
function testBuyCard called 1 returned 100% blocks executed 100%
        1:   20:void testBuyCard() {
        1:   21:	printf("\n--- TESTING buyCard() ---\n");
call    0 returned 100%
        -:   22:	
        1:   23:	int seed = 1000;
        1:   24:	int numPlayers = 2;
        1:   25:	int maxBonus = 10;
        1:   26:	int player = 1;
        -:   27:	struct gameState G;
        1:   28:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel,
        -:   29:				 smithy, village, baron, great_hall};
        -:   30:
        -:   31:	
        1:   32:	memset(&G, 23, sizeof(struct gameState)); // clear gameState
        1:   33:	initializeGame(numPlayers, k, seed, &G); // init a new game
call    0 returned 100%
        -:   34:
        -:   35:	// Check that buying a card changes game state correctly
        1:   36:	G.numBuys = 1;
        1:   37:	G.coins = 5;
        1:   38:	int preCoins = G.coins;
        1:   39:	int preSupplyCount = G.supplyCount[1];
        1:   40:	int preDiscard = G.discardCount[G.whoseTurn];
        1:   41:	assertTrue(buyCard(1, &G) == 0, "buyCard allows a buy when all conditions met");
call    0 returned 100%
call    1 returned 100%
        1:   42:	assertTrue(G.coins == preCoins - getCost(1), "Coins are correctly decreased after a buy");
call    0 returned 100%
call    1 returned 100%
        1:   43:	assertTrue(G.numBuys == 0, "Number of buys is decremented after a buy");
call    0 returned 100%
        1:   44:	assertTrue(G.supplyCount[1] == preSupplyCount - 1, "Supply count of card is decremented after a buy");
call    0 returned 100%
        1:   45:	assertTrue(G.discardCount[G.whoseTurn] == preDiscard + 1, "Discard count incremented after buy");
call    0 returned 100%
        1:   46:	assertTrue(G.discard[G.whoseTurn][G.discardCount[G.whoseTurn] - 1] == 1, "Discard pile contains bought card");
call    0 returned 100%
        -:   47:
        -:   48:	// Check that buying does not occur when no buys are left
        1:   49:	G.numBuys = 0;
        1:   50:	preCoins = G.coins;
        1:   51:	preSupplyCount = G.supplyCount[1];
        1:   52:	preDiscard = G.discardCount[G.whoseTurn];
        1:   53:	assertTrue(buyCard(0, &G) == -1, "buyCard does not allow a buy when no buys left");
call    0 returned 100%
call    1 returned 100%
        1:   54:	assertTrue(G.coins == preCoins, "Coins are not decreased after a failed buy due to no buys left");
call    0 returned 100%
        1:   55:	assertTrue(G.numBuys == 0, "Number of buys is not decremented after a failed buy due to no buys left");
call    0 returned 100%
        1:   56:	assertTrue(G.supplyCount[1] == preSupplyCount, "Supply count of card is not decremented due to no buys left");
call    0 returned 100%
        1:   57:	assertTrue(G.discardCount[G.whoseTurn] == preDiscard, "Discard count is not incremented after buy when no buys left");
call    0 returned 100%
        -:   58:	
        -:   59:	// Check that buying does not occur if there are no coins left
        1:   60:	G.numBuys = 1;
        1:   61:	G.coins = 0;
        1:   62:	preSupplyCount = G.supplyCount[1];
        1:   63:	preDiscard = G.discardCount[G.whoseTurn];
        1:   64:	assertTrue(buyCard(1, &G) == -1, "buyCard does not allow a buy when no coins are left");
call    0 returned 100%
call    1 returned 100%
        1:   65:	assertTrue(G.coins == 0, "Coins are not decreased after a failed buy due to no coins");
call    0 returned 100%
        1:   66:	assertTrue(G.numBuys == 1, "Number of buys is not decreased after a failed buy due to no coins");
call    0 returned 100%
        1:   67:	assertTrue(G.supplyCount[1] == preSupplyCount, "Supply count of card is not decremented due to no coins");
call    0 returned 100%
        1:   68:	assertTrue(G.discardCount[G.whoseTurn] == preDiscard, "Discard count is not incremented after buy when no coins");
call    0 returned 100%
        -:   69:
        -:   70:	// Check that buying does not occur if there are insufficient coins
        1:   71:	G.numBuys = 1;
        1:   72:	G.coins = 1;
        1:   73:	preSupplyCount = G.supplyCount[1];
        1:   74:	preDiscard = G.discardCount[G.whoseTurn];
        1:   75:	assertTrue(buyCard(1, &G) == -1, "buyCard does not allow a buy when insufficient coins");
call    0 returned 100%
call    1 returned 100%
        1:   76:	assertTrue(G.coins == 1, "Coins are not decreased when insufficient coins");
call    0 returned 100%
        1:   77:	assertTrue(G.numBuys == 1, "Number of buys is not decreased when insufficient coins");
call    0 returned 100%
        1:   78:	assertTrue(G.supplyCount[1] == preSupplyCount, "Supply count of card is not decremented when insufficient coins");
call    0 returned 100%
        1:   79:	assertTrue(G.discardCount[G.whoseTurn] == preDiscard, "Discard count is not incremented after buy when insufficient coins");
call    0 returned 100%
        -:   80:
        -:   81:	// Check that buying does not occur if there are no cards left
        1:   82:	G.numBuys = 1;
        1:   83:	G.coins = 5;
        1:   84:	G.supplyCount[1] = 0;
        1:   85:	preDiscard = G.discardCount[G.whoseTurn];
        1:   86:	assertTrue(buyCard(1, &G) == -1, "buyCard does not allow a buy when chosen card not left");
call    0 returned 100%
call    1 returned 100%
        1:   87:	assertTrue(G.coins == 0, "Coins are not decreased when chosen card not left");
call    0 returned 100%
        1:   88:	assertTrue(G.numBuys == 1, "Number of buys is not decreased when chosen card not left");
call    0 returned 100%
        1:   89:	assertTrue(G.supplyCount[1] == 0, "Cards are not decreased when chosen card is not left");
call    0 returned 100%
        1:   90:	assertTrue(G.discardCount[G.whoseTurn] == preDiscard, "Discard count is not incremented after buy when chosen card not left");
call    0 returned 100%
        1:   91:}
        -:   92:
function main called 1 returned 100% blocks executed 100%
        1:   93:int main() {
        1:   94:	testBuyCard();
call    0 returned 100%
        1:   95:	return 0;
        -:   96:}
