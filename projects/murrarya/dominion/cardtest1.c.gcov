        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h> #include <stdlib.h>
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:
        -:    6:#define VERBOSE 1
        -:    7:
        -:    8:typedef enum {false, true} bool;
        -:    9:
function assertTrue called 4 returned 100% blocks executed 100%
        4:   10:bool assertTrue(bool expr, char* description) {
        4:   11:	printf("%s - ", description);
call    0 returned 100%
        4:   12:	if (expr) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   13:		printf("\x1B[32mPASSED\x1B[0m\n");
call    0 returned 100%
        -:   14:	} else {
        2:   15:		printf("\x1B[31mFAILED\x1B[0m\n");
call    0 returned 100%
        -:   16:	}
        4:   17:}
        -:   18:
function testSmithy called 1 returned 100% blocks executed 100%
        1:   19:void testSmithy() {
        1:   20:	printf("\n--- TESTING SMITHY CARD ---\n");
call    0 returned 100%
        -:   21:	
        1:   22:	int seed = 1000;
        1:   23:	int numPlayers = 2;
        1:   24:	int maxBonus = 10;
        -:   25:	struct gameState G;
        1:   26:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel,
        -:   27:				 smithy, village, baron, great_hall};
        -:   28:
        -:   29:	
        1:   30:	memset(&G, 23, sizeof(struct gameState)); // clear gameState
        1:   31:	initializeGame(numPlayers, k, seed, &G); // init a new game
call    0 returned 100%
        1:   32:	G.hand[G.whoseTurn][0] = smithy; // insert smithy card into hand
        -:   33:
        1:   34:	int preHandCount = G.handCount[G.whoseTurn];
        1:   35:	int preDeckCount = G.deckCount[G.whoseTurn];
        1:   36:	int prePlayedCount = G.playedCardCount;
        1:   37:	cardEffect(smithy, 0, 0, 0, &G, 6, 0); // play smithy
call    0 returned 100%
        -:   38:	// new hand count = preHandCount + 3 - 1
        1:   39:	assertTrue(G.handCount[G.whoseTurn] == preHandCount + 2, "Three cards are drawn and one discarded");
call    0 returned 100%
        1:   40:	assertTrue(G.deckCount[G.whoseTurn] == preDeckCount - 3, "Three cards are drawn from deck");
call    0 returned 100%
        1:   41:	assertTrue(G.playedCardCount == prePlayedCount + 1, "Played pile count incremented by one");
call    0 returned 100%
        1:   42:	assertTrue(G.playedCards[prePlayedCount] == smithy, "Smithy placed at top of played pile");
call    0 returned 100%
        1:   43:}
        -:   44:
function main called 1 returned 100% blocks executed 100%
        1:   45:int main() {
        1:   46:	testSmithy();
call    0 returned 100%
        1:   47:	return 0;
        -:   48:}
