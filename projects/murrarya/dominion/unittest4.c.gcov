        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:
        -:    7:#define VERBOSE 1
        -:    8:
        -:    9:typedef enum {false, true} bool;
        -:   10:
function assertTrue called 6 returned 100% blocks executed 80%
        6:   11:bool assertTrue(bool expr, char* description) {
        6:   12:	printf("%s - ", description);
call    0 returned 100%
        6:   13:	if (expr) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:   14:		printf("\x1B[32mPASSED\x1B[0m\n");
call    0 returned 100%
        -:   15:	} else {
    #####:   16:		printf("\x1B[31mFAILED\x1B[0m\n");
call    0 never executed
        -:   17:	}
        6:   18:}
        -:   19:
function testIsGameOver called 1 returned 100% blocks executed 100%
        1:   20:void testIsGameOver() {
        1:   21:	printf("\n--- TESTING isGameOver() ---\n");
call    0 returned 100%
        -:   22:	
        1:   23:	int seed = 1000;
        1:   24:	int numPlayers = 2;
        1:   25:	int maxBonus = 10;
        -:   26:	struct gameState G;
        1:   27:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel,
        -:   28:				 smithy, village, baron, great_hall};
        -:   29:
        -:   30:	
        1:   31:	memset(&G, 23, sizeof(struct gameState)); // clear gameState
        1:   32:	initializeGame(numPlayers, k, seed, &G); // init a new game
call    0 returned 100%
        -:   33:
        -:   34:	int gameOver;
        -:   35:	// Check that game doesn't end if a province card is left and no supply piles gone
        1:   36:	gameOver = isGameOver(&G);
call    0 returned 100%
        1:   37:	assertTrue(!gameOver, "game doesn't end if a province card is left and no supply piles gone");
call    0 returned 100%
        -:   38:
        -:   39:	// Game doesn't end if less than three supply piles are gone
        1:   40:	G.supplyCount[smithy] = 0;
        1:   41:	G.supplyCount[adventurer] = 0;
        1:   42:	gameOver = isGameOver(&G);
call    0 returned 100%
        1:   43:	assertTrue(!gameOver, "Game doesn't end if < 3 supply piles gone");
call    0 returned 100%
        1:   44:	G.supplyCount[smithy] = 10;
        1:   45:	G.supplyCount[adventurer] = 10;
        -:   46:
        -:   47:	// Check that game ends if all province cards are gone
        1:   48:	G.supplyCount[province] = 0;
        1:   49:	gameOver = isGameOver(&G);
call    0 returned 100%
        1:   50:	assertTrue(gameOver, "Game ends if province cards are gone");
call    0 returned 100%
        1:   51:	G.supplyCount[province] = 10;
        -:   52:
        -:   53:	// Check that game ends if three supply piles are gone
        1:   54:	G.supplyCount[smithy] = 0;
        1:   55:	G.supplyCount[adventurer] = 0;
        1:   56:	G.supplyCount[feast] = 0;
        1:   57:	gameOver = isGameOver(&G);
call    0 returned 100%
        1:   58:	assertTrue(gameOver, "Game ends if three supply piles are gone");
call    0 returned 100%
        -:   59:
        -:   60:    // Check that game ends if more than three supply piles are gone
        1:   61:    G.supplyCount[gardens] = 0;
        1:   62:    gameOver = isGameOver(&G);
call    0 returned 100%
        1:   63:    assertTrue(gameOver, "Game ends if more than three supply piles are gone");
call    0 returned 100%
        -:   64:
        -:   65:    // Check that games ends if all conditions are met
        1:   66:    G.supplyCount[province] = 0;
        1:   67:    gameOver = isGameOver(&G);
call    0 returned 100%
        1:   68:    assertTrue(gameOver, "Game ends if all conditions are met");
call    0 returned 100%
        1:   69:}	
        -:   70:
function main called 1 returned 100% blocks executed 100%
        1:   71:int main() {
        1:   72:  testIsGameOver();
call    0 returned 100%
        1:   73:  return 0;
        -:   74:}
