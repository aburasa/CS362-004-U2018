        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:
        -:    7:#define VERBOSE 1
        -:    8:
        -:    9:typedef enum {false, true} bool;
        -:   10:
function assertTrue called 12 returned 100% blocks executed 100%
       12:   11:bool assertTrue(bool expr, char* description) {
       12:   12:	printf("%s - ", description);
call    0 returned 100%
       12:   13:	if (expr) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
       11:   14:		printf("\x1B[32mPASSED\x1B[0m\n");
call    0 returned 100%
        -:   15:	} else {
        1:   16:		printf("\x1B[31mFAILED\x1B[0m\n");
call    0 returned 100%
        -:   17:	}
       12:   18:}
        -:   19:
function testGainCard called 1 returned 100% blocks executed 100%
        1:   20:void testGainCard() {
        1:   21:	printf("\n--- TESTING gainCard() ---\n");
call    0 returned 100%
        -:   22:	
        1:   23:	int seed = 1000;
        1:   24:	int numPlayers = 2;
        1:   25:	int maxBonus = 10;
        -:   26:	struct gameState G;
        1:   27:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel,
        -:   28:				 smithy, village, baron, great_hall};
        -:   29:
        -:   30:	
        1:   31:	memset(&G, 23, sizeof(struct gameState)); // clear gameState
        1:   32:	initializeGame(numPlayers, k, seed, &G); // init a new game
call    0 returned 100%
        -:   33:
        -:   34:	// Check that card can be added to deck
        1:   35:	int preDeckCount = G.deckCount[G.whoseTurn];
        1:   36:	int preSupplyCount = G.supplyCount[smithy];
        1:   37:	gainCard(smithy, &G, 1, G.whoseTurn);
call    0 returned 100%
        1:   38:	assertTrue(G.deckCount[G.whoseTurn] == preDeckCount + 1, "Gained card is added to deck");
call    0 returned 100%
        1:   39:	assertTrue(G.supplyCount[smithy] == preSupplyCount - 1, "Gained card is removed from supply");
call    0 returned 100%
        -:   40:	
        -:   41:	// Check that card can be added to hand
        1:   42:	preSupplyCount = G.supplyCount[adventurer];
        1:   43:	int preHandCount = G.handCount[G.whoseTurn];
        1:   44:	gainCard(adventurer, &G, 2, G.whoseTurn);
call    0 returned 100%
        1:   45:	assertTrue(G.handCount[G.whoseTurn] == preHandCount + 1, "Gained card is added to hand");
call    0 returned 100%
        1:   46:	assertTrue(G.supplyCount[adventurer] == preSupplyCount - 1, "Gained card is removed from supply");
call    0 returned 100%
        -:   47:
        -:   48:	// Check that card can be added to discard pile
        1:   49:	preSupplyCount = G.supplyCount[village];
        1:   50:	int preDiscardCount = G.discardCount[G.whoseTurn];
        1:   51:	gainCard(village, &G, 3, G.whoseTurn);
call    0 returned 100%
        1:   52:	assertTrue(G.discardCount[G.whoseTurn] == preDiscardCount + 1, "Gained card is added to discard pile");
call    0 returned 100%
        1:   53:	assertTrue(G.supplyCount[village] == preSupplyCount - 1, "Gained card is removed from supply");
call    0 returned 100%
        -:   54:
        -:   55:	// Check that card cannot be gained if supply pile is empty
        1:   56:	G.supplyCount[smithy] = 0;
        1:   57:	preHandCount = G.handCount[G.whoseTurn];
        1:   58:	int result = gainCard(smithy, &G, 1, G.whoseTurn);
call    0 returned 100%
        1:   59:	assertTrue(result == -1, "gainCard() exits with error status if card supply is empty");
call    0 returned 100%
        1:   60:	assertTrue(G.supplyCount[smithy] == 0, "Card's supply is not decremented if pile is empty");
call    0 returned 100%
        1:   61:	assertTrue(G.handCount[G.whoseTurn] == preHandCount, "Card is not added to hand if supply pile is empty");
call    0 returned 100%
        -:   62:
        -:   63:	// Check that card cannot be gained if it isn't in the game
        1:   64:	G.supplyCount[embargo] = -1; // Should be unnecessary but just to be safe...
        1:   65:	result = gainCard(embargo, &G, 1, G.whoseTurn);
call    0 returned 100%
        1:   66:	assertTrue(result == -1, "gainCard() exits with error status if card not in game");
call    0 returned 100%
        1:   67:	assertTrue(G.supplyCount[smithy] == -1, "Card's supply is not decremented if card not in game");
call    0 returned 100%
        1:   68:	assertTrue(G.handCount[G.whoseTurn] == preHandCount, "Card is not added to hand if card not in game");
call    0 returned 100%
        1:   69:}
        -:   70:
function main called 1 returned 100% blocks executed 100%
        1:   71:int main() {
        1:   72:	testGainCard();
call    0 returned 100%
        1:   73:	return 0;
        -:   74:}
