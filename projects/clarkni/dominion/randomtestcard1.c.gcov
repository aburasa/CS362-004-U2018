        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* ============================================================
        -:    2: * CS362-400 - Summer 2018
        -:    3: * Mui Clark
        -:    4: * Assignment 4 - Random test generator
        -:    5: *              Card used: council_room
        -:    6: * Reference: testCard code given in the course github repo &
        -:    7: *            class notes
        -:    8: * ============================================================
        -:    9:*/
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include "rngs.h"  //random number generator
        -:   14:#include <string.h>
        -:   15:#include <stdlib.h>
        -:   16:#include <assert.h>
        -:   17:#include <stdio.h>
        -:   18:#include <time.h>
        -:   19:#include <math.h>
        -:   20:
        -:   21:
        -:   22:// Counter variables to test failure rates
        -:   23:int cardEffectFail = 0;
        -:   24:int discardCardFail = 0;
        -:   25:int drawCardFail = 0;
        -:   26:int deckHandCountFail = 0;
        -:   27:int numBuysFail = 0;
        -:   28:int otherPlayerDeckHandFail = 0;
        -:   29:
    20000:   30:void council_roomCardCheck(int p, struct gameState *postgame){
        -:   31:    //variables for cardEffect and drawing cards
        -:   32:    int r, s, t, u, v, w, x;
        -:   33:
        -:   34:    struct gameState pregame; //for manual test
        -:   35:
        -:   36://copy game to pregame state
    20000:   37:    memcpy (&pregame, postgame, sizeof(struct gameState));
    20000:   38:    int bonus = 0;  //set starting bonus to 0
        -:   39:
        -:   40://use council_room card to call the cardEffect function
    20000:   41:    r = cardEffect(council_room, 0,0,0, postgame, 0, &bonus);
        -:   42:
        -:   43://drawCard calls
    20000:   44:    s = drawCard(p,&pregame);
    20000:   45:    t = drawCard(p, &pregame);
    20000:   46:    u = drawCard(p, &pregame);
    20000:   47:    v = drawCard(p, &pregame);
        -:   48:
    20000:   49:    pregame.numBuys++;
        -:   50:
        -:   51://discardCard call
    20000:   52:   x = discardCard(0, p, &pregame, 0);
        -:   53:
        -:   54: //other players draw a card
    80156:   55:   for(int i = 0; i < pregame.numPlayers; i++){
    60156:   56:   		if(i != p){
    40156:   57:   			w = drawCard(i, &pregame);
    40156:   58:   			if(w == -1 && pregame.deckCount[i] != 0){
    #####:   59:   				drawCardFail++;
        -:   60:   			}
        -:   61:   		}
        -:   62:   }
        -:   63:
        -:   64://values of handCount and deckCount
    20000:   65:    int postHandCount = postgame->handCount[p];
    20000:   66:    int postDeckCount = postgame->deckCount[p];
    20000:   67:    int preHandCount = pregame.handCount[p];
    20000:   68:    int preDeckCount = pregame.deckCount[p];
        -:   69:
        -:   70://check for numBuys
    20000:   71:    if(pregame.numBuys != postgame->numBuys)
    #####:   72:    	numBuysFail++;
        -:   73:
        -:   74:
        -:   75://conditionals to check if any drawCards failed for each of the drawCard calls
    20000:   76:    if(s == -1 && pregame.deckCount[p] != 0)
    #####:   77:        drawCardFail++;
        -:   78:
    20000:   79:    if(t == -1 && pregame.deckCount[p] != 0)
    #####:   80:        drawCardFail++;
        -:   81:
    20000:   82:    if(u == -1 && pregame.deckCount[p] != 0)
    #####:   83:        drawCardFail++;
        -:   84:
    20000:   85:    if(v == -1 && pregame.deckCount[p] != 0)
    #####:   86:        drawCardFail++;
        -:   87:
        -:   88://conditional to check if cardEffect and/or discardCard fails
    20000:   89:    if(!(r == 0 && x == 0)){
    #####:   90:        if(r){
    #####:   91:            cardEffectFail++;
        -:   92:        }
    #####:   93:        if(x){
    #####:   94:            discardCardFail++;
        -:   95:        }
        -:   96:    }
        -:   97:
        -:   98://check handCount and deckCounts -> they should match
        -:   99:
    20000:  100:    if(!(postHandCount == preHandCount && postDeckCount == preDeckCount)){
    19998:  101:        deckHandCountFail++;
        -:  102:    }
        -:  103:
        -:  104:// check for other players' hand and deck counts matching
    80156:  105:    for (int i = 0; i < pregame.numPlayers; i++) {
    60156:  106:        if (i != p) {
    80312:  107:            if (!(postgame->handCount[i] == pregame.handCount[i] &&
    40156:  108:                  postgame->deckCount[i] == pregame.deckCount[i])) {
    #####:  109:                      otherPlayerDeckHandFail++;
        -:  110:            }
        -:  111:        }
        -:  112:    }
        -:  113:
    20000:  114:}
        -:  115:
        -:  116://random test harness
        -:  117:
        1:  118:int main(){
        -:  119:
        1:  120:    printf(" Testing Council_room card\n====================\n");
        1:  121:    printf(" RANDOM TESTS\n==========================\n");
        -:  122:
        1:  123:    int iteration = 20000; 
        1:  124:    int totPlayers[] = {2,3,4};
        -:  125:    struct gameState game;
        1:  126:    srand(time(NULL));
        -:  127:
        -:  128:    //random initialization of game state
        -:  129:
    20001:  130:    for (int n = 0; n < iteration; n++){
526020000:  131:        for (int i = 0; i < sizeof(struct gameState); i++){
526000000:  132:            ((char*)&game)[i] = floor(Random() * 256);
        -:  133:        }
        -:  134:
        -:  135:        //random values for each category
    20000:  136:        game.numPlayers = totPlayers[rand() % 3];
    20000:  137:        game.numBuys = 1;
    20000:  138:        int player = game.numPlayers - 2;
    20000:  139:        game.playedCardCount = floor(Random() * (MAX_DECK-1));
        -:  140:
        -:  141://variables to assign for other players
    20000:  142:        int deckCount = floor(Random() * MAX_DECK);
    20000:  143:        int handCount = floor(Random() * MAX_HAND);
    20000:  144:        int discardCardCount = floor(Random() * MAX_DECK);
    20000:  145:        game.whoseTurn = player;
        -:  146:
        -:  147://set other players hand and deck count
    80156:  148:      for (int i = 0; i < game.numPlayers; i++) {
    60156:  149:            game.deckCount[i] = deckCount;
    60156:  150:            game.handCount[i] = handCount;
    60156:  151:            game.discardCount[i] = discardCardCount;
        -:  152:        }  
        -:  153:       
        -:  154:      //call for council_room test function
    20000:  155:      council_roomCardCheck(player, &game);
        -:  156:    }
        -:  157:
        1:  158:    int totalFailures = cardEffectFail + drawCardFail + deckHandCountFail + discardCardFail + numBuysFail;
        -:  159:
        1:  160:    printf("\n RESULTS\n===============\n");
        1:  161:    printf("TESTS PASSED: %d\n", iteration - totalFailures);
        1:  162:    printf("TESTS FAILED: %d\n", totalFailures);
        -:  163:
        -:  164:    //function failed report
        1:  165:    if(totalFailures == 0){
    #####:  166:        printf("ALL RANDOM TESTS PASSED FOR Council_room\n");
        -:  167:    }
        -:  168:    else{
        1:  169:        printf("Num times drawCard function calls failed: %d\n", drawCardFail);
        1:  170:        printf("Num times discardCard function calls failed: %d\n", discardCardFail);
        1:  171:        printf("Num times cardEffect function calls failed: %d\n", cardEffectFail);
        1:  172:        printf("Hand and deck count mismatch: %d\n", deckHandCountFail);
        1:  173:        printf("numBuys count mismatch: %d\n", numBuysFail);
        1:  174:        printf("Hand and deck count mismatch for other player: %d\n", otherPlayerDeckHandFail);
        -:  175:
        1:  176:        printf (" COUNCIL_ROOM RANDOM TESTS FAILED: %d\n", totalFailures);
        -:  177:    }
        -:  178:
        1:  179:    return 0;
        -:  180:}
        -:  181:
