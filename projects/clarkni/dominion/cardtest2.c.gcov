        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* CS362 - Assignment 3
        -:    2: * cardtest2.c --> test for card adventurer
        -:    3: */
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:
        -:   12:
        -:   13:
        -:   14:
        -:   15://count of test failures - global count
        -:   16:int failuresCount = 0;
        -:   17:
        -:   18://own asserttrue function
function assertTrue called 17 returned 100% blocks executed 100%
       17:   19:void assertTrue(int a, int b){
       17:   20:    if (a == b)
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
       15:   21:        printf("Test: PASS");
call    0 returned 100%
        -:   22:    else {
        2:   23:        printf("Test: FAIL\n");
call    0 returned 100%
        2:   24:        failuresCount++;
        -:   25:    }
       17:   26:}
        -:   27:
function main called 1 returned 100% blocks executed 87%
        1:   28:int main(){
        -:   29:
        1:   30:    printf("***********Testing for Card ADVENTURER ********************\n");
call    0 returned 100%
        -:   31:
        1:   32:    int numPlayers = 2;
        1:   33:    int player0 = 0;
        1:   34:    int player1 = 1;
        -:   35:    
        1:   36:    int treasureCount = 0, originalTreasureCount = 0; 
        -:   37:
        1:   38:    int handPosition = 0;
        1:   39:    int choice1 = 0,  choice2 = 0, choice3 = 0, bonus = 0;
        -:   40:
        -:   41:    //kingdom cards
        1:   42:    int k[10] = {adventurer, smithy, great_hall, council_room, 
        -:   43:                 embargo, steward, feast, baron, village, gardens};
        -:   44:
        1:   45:    int seed = 1000;
        -:   46:
        -:   47:    struct gameState game, originalGame;
        -:   48:
        1:   49:    memset(&game, 25, sizeof(struct gameState));
        1:   50:    memset(&originalGame, 25, sizeof(struct gameState));
        -:   51:
        -:   52:    //initialize game
        1:   53:    initializeGame(numPlayers, k, seed, &game);
call    0 returned 100%
        -:   54:
        -:   55:    //copy to preserve it
        1:   56:    memcpy(&originalGame, &game, sizeof(struct gameState));
        -:   57:
        1:   58:    printf("TEST FOR ADVENTURER\n");
call    0 returned 100%
        -:   59:
        -:   60:    
        1:   61:    cardEffect(adventurer, choice1, choice2, choice3, &game, handPosition, &bonus);
call    0 returned 100%
        -:   62:
        1:   63:    printf("\nDid Player 0 gain 2 cards?\n");
call    0 returned 100%
        1:   64:    assertTrue(game.handCount[player0], originalGame.handCount[player0] + 2);
call    0 returned 100%
        -:   65:
        1:   66:    printf("\nCheck how the treasureCount changed\n");
call    0 returned 100%
        1:   67:    for (int i = 0; i < game.handCount[player0]; i++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   68:        int card = game.hand[player0][i];
    #####:   69:        if (card == copper || card == silver || card == gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   70:            treasureCount++;
        -:   71:        }
        -:   72:    }
        -:   73:
        1:   74:    printf("\n Checking originalTreasureCount\n");
call    0 returned 100%
        6:   75:    for (int i = 0; i < originalGame.handCount[player0]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   76:        int card = originalGame.hand[player0][i];
        5:   77:        if (card == copper || card == silver || card == gold) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:   78:            originalTreasureCount++;
        -:   79:        }
        -:   80:    }
        -:   81:
        1:   82:    printf("\nPlayer 0 gains 2 treasure cards");
call    0 returned 100%
        1:   83:    assertTrue(originalTreasureCount + 2, treasureCount);
call    0 returned 100%
        -:   84:
        -:   85:
        1:   86:    printf("\nAny change to victory card piles?\n");
call    0 returned 100%
        1:   87:    printf("Duchy Pile\n");
call    0 returned 100%
        1:   88:    assertTrue(game.supplyCount[duchy],originalGame.supplyCount[duchy]);
call    0 returned 100%
        1:   89:    printf("\nProvince Pile\n");
call    0 returned 100%
        1:   90:    assertTrue(game.supplyCount[province],originalGame.supplyCount[province]);
call    0 returned 100%
        1:   91:    printf("\nEstate Pile\n");
call    0 returned 100%
        1:   92:    assertTrue(game.supplyCount[estate],originalGame.supplyCount[estate]);
call    0 returned 100%
        -:   93:
        1:   94:    printf("\nAny change to kingdom card piles?");
call    0 returned 100%
       11:   95:    for (int i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:   96:        assertTrue(game.supplyCount[k[i]],originalGame.supplyCount[k[i]]);
call    0 returned 100%
        -:   97:    
        1:   98:    printf("\nCheck to see if Player 1 was affected\n");
call    0 returned 100%
        1:   99:    printf("Hand count for player 1 - is it valid?\n");
call    0 returned 100%
        1:  100:    assertTrue(game.handCount[player1],originalGame.handCount[player1]);
call    0 returned 100%
        1:  101:    printf("\nDeck count for player 1 - is is valid?\n");
call    0 returned 100%
        1:  102:    assertTrue(game.deckCount[player1],originalGame.deckCount[player1]);
call    0 returned 100%
        -:  103:
        -:  104:
        1:  105:    if (failuresCount) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  106:        printf("\nNUMBER OF TESTS FAILED\n");
call    0 returned 100%
        1:  107:        printf("Fails: %d\n",failuresCount);
call    0 returned 100%
        -:  108:    }
        -:  109:    else {
    #####:  110:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
call    0 never executed
        -:  111:    }
        -:  112:
        1:  113:    return 0;
        -:  114:
        -:  115:}
