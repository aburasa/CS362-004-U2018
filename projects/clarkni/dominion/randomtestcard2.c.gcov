        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* ==============================================================
        -:    3: * CS362-400 - Summer 2018
        -:    4: * Mui Clark
        -:    5: * Assignment 4 - Random test generator
        -:    6: *              Card used: smithy
        -:    7: * Reference: testDrawCard code given in the course github repo &
        -:    8:              Class notes
        -:    9: * ==============================================================
        -:   10:*/
        -:   11:
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "rngs.h"  //random number generator
        -:   15:#include <string.h>
        -:   16:#include <stdlib.h>
        -:   17:#include <assert.h>
        -:   18:#include <stdio.h>
        -:   19:#include <time.h>
        -:   20:#include <math.h>
        -:   21:
        -:   22:
        -:   23:// Counter variables to test failure rates
        -:   24:int cardEffectFail = 0;
        -:   25:int discardCardFail = 0;
        -:   26:int drawCardFail = 0;
        -:   27:int deckHandCountFail = 0;
        -:   28:
        -:   29://smithy card test function
    20000:   30:void smithyCardCheck(int p, struct gameState *postgame){
        -:   31:    //variables for cardEffect and drawing cards
        -:   32:    int r, s, t, u, v;
        -:   33:
        -:   34:    struct gameState pregame; //for manual test
        -:   35:
        -:   36://copy game to pregame state
    20000:   37:    memcpy (&pregame, postgame, sizeof(struct gameState));
    20000:   38:    int bonus = 0;  //set starting bonus to 0
        -:   39:
        -:   40://use smithy card to call the cardEffect function
    20000:   41:    r = cardEffect(smithy, 0,0,0, postgame, 0, &bonus);
        -:   42:
        -:   43://drawCard calls
    20000:   44:    s = drawCard(p,&pregame);
    20000:   45:    t = drawCard(p, &pregame);
    20000:   46:    u = drawCard(p, &pregame);
        -:   47:
        -:   48://discardCard call
    20000:   49:    v = discardCard(0, p, &pregame, 0);
        -:   50:
        -:   51://values of handCount and deckCount
    20000:   52:    int postHandCount = postgame->handCount[p];
    20000:   53:    int postDeckCount = postgame->deckCount[p];
    20000:   54:    int preHandCount = pregame.handCount[p];
    20000:   55:    int preDeckCount = pregame.deckCount[p];
        -:   56:
        -:   57://conditionals to check if any drawCards failed for each of the drawCard calls
    20000:   58:    if(s == -1 && pregame.deckCount[p] != 0)
    #####:   59:        drawCardFail++;
        -:   60:
    20000:   61:    if(t == -1 && pregame.deckCount[p] != 0)
    #####:   62:        drawCardFail++;
        -:   63:
    20000:   64:    if(u == -1 && pregame.deckCount[p] != 0)
    #####:   65:        drawCardFail++;
        -:   66:
        -:   67://conditional to check if cardEffect and/or discardCard fails
    20000:   68:    if(!(r == 0 && v == 0)){
    #####:   69:        if(r){
    #####:   70:            cardEffectFail++;
        -:   71:        }
    #####:   72:        if(v){
    #####:   73:            discardCardFail++;
        -:   74:        }
        -:   75:    }
        -:   76:
        -:   77://check handCount and deckCounts -> they should match
        -:   78:
    20000:   79:    if(!(postHandCount == preHandCount && postDeckCount == preDeckCount)){
    20000:   80:        deckHandCountFail++;
        -:   81:    }
        -:   82:
    20000:   83:}
        -:   84:
        -:   85:
        -:   86://random test harness
        -:   87:
        1:   88:int main(){
        -:   89:
        1:   90:    printf(" Testing Smithy card\n====================\n");
        1:   91:    printf(" RANDOM TESTS\n==========================\n");
        -:   92:
        1:   93:    int iteration = 20000; 
        -:   94:    int n, player;
        -:   95:    struct gameState game;
        1:   96:    srand(time(NULL));
        -:   97:
        -:   98:    //random initialization of game state
        -:   99:
    20001:  100:    for (n = 0; n < iteration; n++){
526020000:  101:        for (int i = 0; i < sizeof(struct gameState); i++){
526000000:  102:            ((char*)&game)[i] = floor(Random() * 256);
        -:  103:        }
        -:  104:
        -:  105:        //random values for each category
    20000:  106:        player = floor(Random() * MAX_PLAYERS);
    20000:  107:        game.deckCount[player] = floor(Random() * MAX_DECK);
    20000:  108:        game.handCount[player] = floor(Random() * MAX_HAND);
    20000:  109:        game.playedCardCount = floor(Random() * (MAX_DECK-1));
    20000:  110:        game.discardCount[player] = floor(Random() * MAX_DECK);
    20000:  111:        game.whoseTurn = player;
    20000:  112:        smithyCardCheck(player, &game);
        -:  113:
        -:  114:    }
        -:  115:
        1:  116:    int totalFailures = cardEffectFail + drawCardFail + deckHandCountFail + discardCardFail;
        -:  117:
        1:  118:    printf("\n RESULTS\n===============\n");
        1:  119:    printf("TESTS PASSED: %d\n", iteration - totalFailures);
        1:  120:    printf("TESTS FAILED: %d\n", totalFailures);
        -:  121:
        -:  122:    //function failed report
        1:  123:    if(totalFailures == 0){
    #####:  124:        printf("ALL RANDOM TESTS PASSED FOR SMITHY\n");
        -:  125:    }
        -:  126:    else{
        1:  127:        printf("Num times drawCard function calls failed: %d\n", drawCardFail);
        1:  128:        printf("Num times discardCard function calls failed: %d\n", discardCardFail);
        1:  129:        printf("Num times cardEffect function calls failed: %d\n", cardEffectFail);
        1:  130:        printf("Hand and deck count mismatch: %d\n", deckHandCountFail);
        1:  131:        printf (" SMITHY RANDOM TESTS FAILED: %d\n", totalFailures);
        -:  132:    }
        -:  133:
        -:  134:    
        -:  135:
        1:  136:    return 0;
        -:  137:}
        -:  138:
