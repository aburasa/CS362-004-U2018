        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int playSmithy(int currentPlayer, struct gameState *state, int handPos);
        -:    9:int playAdventurer(int currentPlayer, struct gameState *state, int cardDrawn, int drawntreasure, int temphand[], int z);
        -:   10:int playFeast(struct gameState *state, int currentPlayer, int temphand[], int choice1);
        -:   11:int playTribute(struct gameState *state, int nextPlayer, int currentPlayer);
        -:   12:
     1861:   13:int compare(const void* a, const void* b) {
     1861:   14:  if (*(int*)a > *(int*)b)
      885:   15:    return 1;
      976:   16:  if (*(int*)a < *(int*)b)
      280:   17:    return -1;
      696:   18:  return 0;
        -:   19:}
        -:   20:
    #####:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
    #####:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
        3:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;			
        -:   48:  //set up random number generator
        3:   49:  SelectStream(1);
        3:   50:  PutSeed((long)randomSeed);
        -:   51:  
        -:   52:  //check number of players
        3:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   54:    {
    #####:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
        3:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
       33:   62:  for (i = 0; i < 10; i++)
        -:   63:    {
      330:   64:      for (j = 0; j < 10; j++)
        -:   65:        {
      300:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   67:	    {
    #####:   68:	      return -1;
        -:   69:	    }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
        3:   78:  if (numPlayers == 2)
        -:   79:    {
        3:   80:      state->supplyCount[curse] = 10;
        -:   81:    }
    #####:   82:  else if (numPlayers == 3)
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:  else
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
        3:   92:  if (numPlayers == 2)
        -:   93:    {
        3:   94:      state->supplyCount[estate] = 8;
        3:   95:      state->supplyCount[duchy] = 8;
        3:   96:      state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:  else
        -:   99:    {
    #####:  100:      state->supplyCount[estate] = 12;
    #####:  101:      state->supplyCount[duchy] = 12;
    #####:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
        3:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  107:  state->supplyCount[silver] = 40;
        3:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
       63:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  112:    {
      495:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  114:	{
      465:  115:	  if (kingdomCards[j] == i)
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
       30:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  119:		{
        6:  120:		  if (numPlayers == 2){ 
        3:  121:		    state->supplyCount[i] = 8; 
        -:  122:		  }
    #####:  123:		  else{ state->supplyCount[i] = 12; }
        -:  124:		}
        -:  125:	      else
        -:  126:		{
       27:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
       30:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
      435:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
        -:  135:	}
        -:  136:
        -:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
        9:  143:  for (i = 0; i < numPlayers; i++)
        -:  144:    {
        6:  145:      state->deckCount[i] = 0;
       24:  146:      for (j = 0; j < 3; j++)
        -:  147:	{
       18:  148:	  state->deck[i][j] = estate;
       18:  149:	  state->deckCount[i]++;
        -:  150:	}
       48:  151:      for (j = 3; j < 10; j++)
        -:  152:	{
       42:  153:	  state->deck[i][j] = copper;
       42:  154:	  state->deckCount[i]++;		
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
        9:  159:  for (i = 0; i < numPlayers; i++)
        -:  160:    {
        6:  161:      if ( shuffle(i, state) < 0 )
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //draw player hands
        9:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {  
        -:  170:      //initialize hand size to zero
        6:  171:      state->handCount[i] = 0;
        6:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:    }
        -:  179:  
        -:  180:  //set embargo tokens to 0 for all supply piles
       84:  181:  for (i = 0; i <= treasure_map; i++)
        -:  182:    {
       81:  183:      state->embargoTokens[i] = 0;
        -:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
        3:  187:  state->outpostPlayed = 0;
        3:  188:  state->phase = 0;
        3:  189:  state->numActions = 1;
        3:  190:  state->numBuys = 1;
        3:  191:  state->playedCardCount = 0;
        3:  192:  state->whoseTurn = 0;
        3:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
       18:  197:  for (it = 0; it < 5; it++){
       15:  198:    drawCard(state->whoseTurn, state);
        -:  199:  }
        -:  200:
        3:  201:  updateCoins(state->whoseTurn, state, 0);
        -:  202:
        3:  203:  return 0;
        -:  204:}
        -:  205:
       49:  206:int shuffle(int player, struct gameState *state) {
        -:  207: 
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
       49:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
       49:  214:  if (state->deckCount[player] < 1)
        2:  215:    return -1;
       47:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
      769:  219:  while (state->deckCount[player] > 0) {
      675:  220:    card = floor(Random() * state->deckCount[player]);
      675:  221:    newDeck[newDeckPos] = state->deck[player][card];
      675:  222:    newDeckPos++;
     3168:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
     2493:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
      675:  226:    state->deckCount[player]--;
        -:  227:  }
      722:  228:  for (i = 0; i < newDeckPos; i++) {
      675:  229:    state->deck[player][i] = newDeck[i];
      675:  230:    state->deckCount[player]++;
        -:  231:  }
        -:  232:
       47:  233:  return 0;
        -:  234:}
        -:  235:
      120:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  237:{	
        -:  238:  int card;
      120:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
      120:  242:  if (state->phase != 0)
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //check if player has enough actions
      120:  248:  if ( state->numActions < 1 )
        -:  249:    {
      101:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
       19:  254:  card = handCard(handPos, state);
        -:  255:	
        -:  256:  //check if selected card is an action
       19:  257:  if ( card < adventurer || card > treasure_map )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //play card
       19:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //reduce number of actions
       19:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
       19:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  273:	
       19:  274:  return 0;
        -:  275:}
        -:  276:
      107:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
        -:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
      107:  285:  who = state->whoseTurn;
        -:  286:
      107:  287:  if (state->numBuys < 1){
        -:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
      107:  291:  } else if (supplyCount(supplyPos, state) <1){
        -:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
      107:  295:  } else if (state->coins < getCost(supplyPos)){
        -:  296:    if (DEBUG) 
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
      107:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
      107:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:  
      107:  304:    state->coins = (state->coins) - (getCost(supplyPos));
      107:  305:    state->numBuys--;
        -:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:    
      107:  313:  return 0;
        -:  314:}
        -:  315:
      794:  316:int numHandCards(struct gameState *state) {
      794:  317:  return state->handCount[ whoseTurn(state) ];
        -:  318:}
        -:  319:
     1574:  320:int handCard(int handPos, struct gameState *state) {
     1574:  321:  int currentPlayer = whoseTurn(state);
     1574:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
      214:  325:int supplyCount(int card, struct gameState *state) {
      214:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
        -:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
     2601:  351:int whoseTurn(struct gameState *state) {
     2601:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
      107:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
      107:  358:  int currentPlayer = whoseTurn(state);
        -:  359:  
        -:  360:  //Discard hand
      680:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      573:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      573:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:  }
      107:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:    
        -:  367:  //Code for determining the player
      107:  368:  if (currentPlayer < (state->numPlayers - 1)){ 
       55:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:  }
        -:  371:  else{
       52:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
      107:  375:  state->outpostPlayed = 0;
      107:  376:  state->phase = 0;
      107:  377:  state->numActions = 1;
      107:  378:  state->coins = 0;
      107:  379:  state->numBuys = 1;
      107:  380:  state->playedCardCount = 0;
      107:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
      642:  385:  for (k = 0; k < 5; k++){
      535:  386:    drawCard(state->whoseTurn, state);//Draw a card
        -:  387:  }
        -:  388:
        -:  389:  //Update money
      107:  390:  updateCoins(state->whoseTurn, state , 0);
        -:  391:
      107:  392:  return 0;
        -:  393:}
        -:  394:
      110:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:	
        -:  399:  //if stack of Province cards is empty, the game ends
      110:  400:  if (state->supplyCount[province] == 0)
        -:  401:    {
        3:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
      107:  406:  j = 0;
     2782:  407:  for (i = 0; i < 25; i++)
        -:  408:    {
     2675:  409:      if (state->supplyCount[i] == 0)
        -:  410:	{
    #####:  411:	  j++;
        -:  412:	}
        -:  413:    }
      107:  414:  if ( j >= 3)
        -:  415:    {
    #####:  416:      return 1;
        -:  417:    }
        -:  418:
      107:  419:  return 0;
        -:  420:}
        -:  421:
        6:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
        6:  425:  int score = 0;
        -:  426:  //score from hand
       21:  427:  for (i = 0; i < state->handCount[player]; i++)
        -:  428:    {
       15:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
       15:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
       15:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
       15:  432:      if (state->hand[player][i] == province) { score = score + 6; };
       15:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       15:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  435:    }
        -:  436:
        -:  437:  //score from discard
       74:  438:  for (i = 0; i < state->discardCount[player]; i++)
        -:  439:    {
       68:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
       68:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
       68:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
       68:  443:      if (state->discard[player][i] == province) { score = score + 6; };
       68:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       68:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  446:    }
        -:  447:
        -:  448:  //score from deck
       74:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
       68:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
       68:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
       68:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
       68:  454:      if (state->deck[player][i] == province) { score = score + 6; };
       68:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       68:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  457:    }
        -:  458:
        6:  459:  return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;	
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
        -:  473:	{
    #####:  474:	  players[i] = -9999;
        -:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
        -:  479:	}
        -:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
        -:  487:	{
    #####:  488:	  j = i;
        -:  489:	}
        -:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
        -:  498:	{
    #####:  499:	  players[i]++;
        -:  500:	}
        -:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
        -:  508:	{
    #####:  509:	  j = i;
        -:  510:	}
        -:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
        -:  518:	{
    #####:  519:	  players[i] = 1;
        -:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
        -:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
      597:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
      597:  533:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  534:    
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
      656:  538:    for (i = 0; i < state->discardCount[player];i++){
      615:  539:      state->deck[player][i] = state->discard[player][i];
      615:  540:      state->discard[player][i] = -1;
        -:  541:    }
        -:  542:
       41:  543:    state->deckCount[player] = state->discardCount[player];
       41:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
       41:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  548:   
        -:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:    
       41:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
       41:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:    
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:    
       41:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
       41:  564:    if (deckCounter == 0)
    #####:  565:      return -1;
        -:  566:
       41:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       41:  568:    state->deckCount[player]--;
       41:  569:    state->handCount[player]++;//Increment hand count
        -:  570:  }
        -:  571:
        -:  572:  else{
      556:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
      556:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
      556:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      556:  581:    state->deckCount[player]--;
      556:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
      597:  585:  return 0;
        -:  586:}
        -:  587:
      214:  588:int getCost(int cardNumber)
        -:  589:{
      214:  590:  switch( cardNumber ) 
        -:  591:    {
    #####:  592:    case curse:
    #####:  593:      return 0;
    #####:  594:    case estate:
    #####:  595:      return 2;
    #####:  596:    case duchy:
    #####:  597:      return 5;
       48:  598:    case province:
       48:  599:      return 8;
    #####:  600:    case copper:
    #####:  601:      return 0;
       86:  602:    case silver:
       86:  603:      return 3;
       56:  604:    case gold:
       56:  605:      return 6;
       12:  606:    case adventurer:
       12:  607:      return 6;
    #####:  608:    case council_room:
    #####:  609:      return 5;
    #####:  610:    case feast:
    #####:  611:      return 4;
    #####:  612:    case gardens:
    #####:  613:      return 4;
    #####:  614:    case mine:
    #####:  615:      return 5;
    #####:  616:    case remodel:
    #####:  617:      return 4;
       12:  618:    case smithy:
       12:  619:      return 4;
    #####:  620:    case village:
    #####:  621:      return 3;
    #####:  622:    case baron:
    #####:  623:      return 4;
    #####:  624:    case great_hall:
    #####:  625:      return 3;
    #####:  626:    case minion:
    #####:  627:      return 5;
    #####:  628:    case steward:
    #####:  629:      return 3;
    #####:  630:    case tribute:
    #####:  631:      return 5;
    #####:  632:    case ambassador:
    #####:  633:      return 3;
    #####:  634:    case cutpurse:
    #####:  635:      return 4;
    #####:  636:    case embargo: 
    #####:  637:      return 2;
    #####:  638:    case outpost:
    #####:  639:      return 5;
    #####:  640:    case salvager:
    #####:  641:      return 4;
    #####:  642:    case sea_hag:
    #####:  643:      return 4;
    #####:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
        -:  649:}
        -:  650:
       19:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:  int i;
        -:  654:  int j;
        -:  655:  int k;
        -:  656:  //int x;
        -:  657:  int index;
       19:  658:  int currentPlayer = whoseTurn(state);
       19:  659:  int nextPlayer = currentPlayer + 1;
        -:  660:
        -:  661:  //int tributeRevealedCards[2] = {-1, -1};
        -:  662:  int temphand[MAX_HAND];// moved above the if statement
       19:  663:  int drawntreasure=0;
       19:  664:  int cardDrawn = 0;
       19:  665:  int z = 0;// this is the counter for the temp hand
       19:  666:  if (nextPlayer > (state->numPlayers - 1)){
       13:  667:    nextPlayer = 0;
        -:  668:  }
        -:  669:  
        -:  670:	
        -:  671:  //uses switch to select card and perform actions
       19:  672:  switch( card ) 
        -:  673:    {
       13:  674:    case adventurer:
       13:  675:      return playAdventurer(currentPlayer, state, cardDrawn, drawntreasure, temphand, z);
        -:  676:			
    #####:  677:    case council_room:
        -:  678:      //+4 Cards
    #####:  679:      for (i = 0; i < 4; i++)
        -:  680:	{
    #####:  681:	  drawCard(currentPlayer, state);
        -:  682:	}
        -:  683:			
        -:  684:      //+1 Buy
    #####:  685:      state->numBuys++;
        -:  686:			
        -:  687:      //Each other player draws a card
    #####:  688:      for (i = 0; i < state->numPlayers; i++)
        -:  689:	{
    #####:  690:	  if ( i != currentPlayer )
        -:  691:	    {
    #####:  692:	      drawCard(i, state);
        -:  693:	    }
        -:  694:	}
        -:  695:			
        -:  696:      //put played card in played card pile
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
        -:  698:			
    #####:  699:      return 0;
        -:  700:			
    #####:  701:    case feast:
    #####:  702:      return playFeast(state, currentPlayer, temphand, choice1);
        -:  703:    
    #####:  704:    case gardens:
    #####:  705:      return -1;
        -:  706:			
    #####:  707:    case mine:
    #####:  708:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  709:
    #####:  710:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  711:	{
    #####:  712:	  return -1;
        -:  713:	}
        -:  714:		
    #####:  715:      if (choice2 > treasure_map || choice2 < curse)
        -:  716:	{
    #####:  717:	  return -1;
        -:  718:	}
        -:  719:
    #####:  720:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  721:	{
    #####:  722:	  return -1;
        -:  723:	}
        -:  724:
    #####:  725:      gainCard(choice2, state, 2, currentPlayer);
        -:  726:
        -:  727:      //discard card from hand
    #####:  728:      discardCard(handPos, currentPlayer, state, 0);
        -:  729:
        -:  730:      //discard trashed card
    #####:  731:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  732:	{
    #####:  733:	  if (state->hand[currentPlayer][i] == j)
        -:  734:	    {
    #####:  735:	      discardCard(i, currentPlayer, state, 0);			
    #####:  736:	      break;
        -:  737:	    }
        -:  738:	}
        -:  739:			
    #####:  740:      return 0;
        -:  741:			
    #####:  742:    case remodel:
    #####:  743:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  744:
    #####:  745:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      gainCard(choice2, state, 0, currentPlayer);
        -:  751:
        -:  752:      //discard card from hand
    #####:  753:      discardCard(handPos, currentPlayer, state, 0);
        -:  754:
        -:  755:      //discard trashed card
    #####:  756:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  757:	{
    #####:  758:	  if (state->hand[currentPlayer][i] == j)
        -:  759:	    {
    #####:  760:	      discardCard(i, currentPlayer, state, 0);			
    #####:  761:	      break;
        -:  762:	    }
        -:  763:	}
        -:  764:
        -:  765:
    #####:  766:      return 0;
        -:  767:		
        6:  768:    case smithy:
        6:  769:      return playSmithy(currentPlayer, state, handPos);
        -:  770:		
    #####:  771:    case village:
        -:  772:      //+1 Card
    #####:  773:      drawCard(currentPlayer, state);
        -:  774:			
        -:  775:      //+2 Actions
    #####:  776:      state->numActions = state->numActions + 2;
        -:  777:			
        -:  778:      //discard played card from hand
    #####:  779:      discardCard(handPos, currentPlayer, state, 0);
    #####:  780:      return 0;
        -:  781:		
    #####:  782:    case baron:
    #####:  783:      state->numBuys++;//Increase buys by 1!
    #####:  784:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  785:	int p = 0;//Iterator for hand!
    #####:  786:	int card_not_discarded = 1;//Flag for discard set!
    #####:  787:	while(card_not_discarded){
    #####:  788:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  789:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  790:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  791:	    state->discardCount[currentPlayer]++;
    #####:  792:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  793:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  794:	    }
    #####:  795:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  796:	    state->handCount[currentPlayer]--;
    #####:  797:	    card_not_discarded = 0;//Exit the loop
        -:  798:	  }
    #####:  799:	  else if (p > state->handCount[currentPlayer]){
        -:  800:	    if(DEBUG) {
        -:  801:	      printf("No estate cards in your hand, invalid choice\n");
        -:  802:	      printf("Must gain an estate if there are any\n");
        -:  803:	    }
    #####:  804:	    if (supplyCount(estate, state) > 0){
    #####:  805:	      gainCard(estate, state, 0, currentPlayer);
    #####:  806:	      state->supplyCount[estate]--;//Decrement estates
    #####:  807:	      if (supplyCount(estate, state) == 0){
    #####:  808:		isGameOver(state);
        -:  809:	      }
        -:  810:	    }
    #####:  811:	    card_not_discarded = 0;//Exit the loop
        -:  812:	  }
        -:  813:			    
        -:  814:	  else{
    #####:  815:	    p++;//Next card
        -:  816:	  }
        -:  817:	}
        -:  818:      }
        -:  819:			    
        -:  820:      else{
    #####:  821:	if (supplyCount(estate, state) > 0){
    #####:  822:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  823:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  824:	  if (supplyCount(estate, state) == 0){
    #####:  825:	    isGameOver(state);
        -:  826:	  }
        -:  827:	}
        -:  828:      }
        -:  829:	    
        -:  830:      
    #####:  831:      return 0;
        -:  832:		
    #####:  833:    case great_hall:
        -:  834:      //+1 Card
    #####:  835:      drawCard(currentPlayer, state);
        -:  836:			
        -:  837:      //+1 Actions
    #####:  838:      state->numActions++;
        -:  839:			
        -:  840:      //discard card from hand
    #####:  841:      discardCard(handPos, currentPlayer, state, 0);
    #####:  842:      return 0;
        -:  843:		
    #####:  844:    case minion:
        -:  845:      //+1 action
    #####:  846:      state->numActions++;
        -:  847:			
        -:  848:      //discard card from hand
    #####:  849:      discardCard(handPos, currentPlayer, state, 0);
        -:  850:			
    #####:  851:      if (choice1)		//+2 coins
        -:  852:	{
    #####:  853:	  state->coins = state->coins + 2;
        -:  854:	}
        -:  855:			
    #####:  856:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  857:	{
        -:  858:	  //discard hand
    #####:  859:	  while(numHandCards(state) > 0)
        -:  860:	    {
    #####:  861:	      discardCard(handPos, currentPlayer, state, 0);
        -:  862:	    }
        -:  863:				
        -:  864:	  //draw 4
    #####:  865:	  for (i = 0; i < 4; i++)
        -:  866:	    {
    #####:  867:	      drawCard(currentPlayer, state);
        -:  868:	    }
        -:  869:				
        -:  870:	  //other players discard hand and redraw if hand size > 4
    #####:  871:	  for (i = 0; i < state->numPlayers; i++)
        -:  872:	    {
    #####:  873:	      if (i != currentPlayer)
        -:  874:		{
    #####:  875:		  if ( state->handCount[i] > 4 )
        -:  876:		    {
        -:  877:		      //discard hand
    #####:  878:		      while( state->handCount[i] > 0 )
        -:  879:			{
    #####:  880:			  discardCard(handPos, i, state, 0);
        -:  881:			}
        -:  882:							
        -:  883:		      //draw 4
    #####:  884:		      for (j = 0; j < 4; j++)
        -:  885:			{
    #####:  886:			  drawCard(i, state);
        -:  887:			}
        -:  888:		    }
        -:  889:		}
        -:  890:	    }
        -:  891:				
        -:  892:	}
    #####:  893:      return 0;
        -:  894:		
    #####:  895:    case steward:
    #####:  896:      if (choice1 == 1)
        -:  897:	{
        -:  898:	  //+2 cards
    #####:  899:	  drawCard(currentPlayer, state);
    #####:  900:	  drawCard(currentPlayer, state);
        -:  901:	}
    #####:  902:      else if (choice1 == 2)
        -:  903:	{
        -:  904:	  //+2 coins
    #####:  905:	  state->coins = state->coins + 2;
        -:  906:	}
        -:  907:      else
        -:  908:	{
        -:  909:	  //trash 2 cards in hand
    #####:  910:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  911:	  discardCard(choice3, currentPlayer, state, 1);
        -:  912:	}
        -:  913:			
        -:  914:      //discard card from hand
    #####:  915:      discardCard(handPos, currentPlayer, state, 0);
    #####:  916:      return 0;
        -:  917:		
    #####:  918:    case tribute:
        -:  919:    /*
        -:  920:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -:  921:	if (state->deckCount[nextPlayer] > 0){
        -:  922:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -:  923:	  state->deckCount[nextPlayer]--;
        -:  924:	}
        -:  925:	else if (state->discardCount[nextPlayer] > 0){
        -:  926:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -:  927:	  state->discardCount[nextPlayer]--;
        -:  928:	}
        -:  929:	else{
        -:  930:	  //No Card to Reveal
        -:  931:	  if (DEBUG){
        -:  932:	    printf("No cards to reveal\n");
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:	    
        -:  937:      else{
        -:  938:	if (state->deckCount[nextPlayer] == 0){
        -:  939:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -:  940:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -:  941:	    state->deckCount[nextPlayer]++;
        -:  942:	    state->discard[nextPlayer][i] = -1;
        -:  943:	    state->discardCount[nextPlayer]--;
        -:  944:	  }
        -:  945:			    
        -:  946:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  947:	} 
        -:  948:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -:  949:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -:  950:	state->deckCount[nextPlayer]--;
        -:  951:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -:  952:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -:  953:	state->deckCount[nextPlayer]--;
        -:  954:      }    
        -:  955:		       
        -:  956:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -:  957:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -:  958:	state->playedCardCount++;
        -:  959:	tributeRevealedCards[1] = -1;
        -:  960:      }
        -:  961:
        -:  962:      for (i = 0; i <= 2; i ++){
        -:  963:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -:  964:	  state->coins += 2;
        -:  965:	}
        -:  966:		    
        -:  967:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -:  968:	  drawCard(currentPlayer, state);
        -:  969:	  drawCard(currentPlayer, state);
        -:  970:	}
        -:  971:	else{//Action Card
        -:  972:	  state->numActions = state->numActions + 2;
        -:  973:	}
        -:  974:      }
        -:  975:	    
        -:  976:      return 0; */
    #####:  977:		return playTribute(state, nextPlayer, currentPlayer);
        -:  978:
    #####:  979:    case ambassador:
    #####:  980:      j = 0;		//used to check if player has enough cards to discard
        -:  981:
    #####:  982:      if (choice2 > 2 || choice2 < 0)
        -:  983:	{
    #####:  984:	  return -1;				
        -:  985:	}
        -:  986:
    #####:  987:      if (choice1 == handPos)
        -:  988:	{
    #####:  989:	  return -1;
        -:  990:	}
        -:  991:
    #####:  992:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  993:	{
    #####:  994:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  995:	    {
    #####:  996:	      j++;
        -:  997:	    }
        -:  998:	}
    #####:  999:      if (j < choice2)
        -: 1000:	{
    #####: 1001:	  return -1;				
        -: 1002:	}
        -: 1003:
        -: 1004:      if (DEBUG) 
        -: 1005:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1006:
        -: 1007:      //increase supply count for choosen card by amount being discarded
    #####: 1008:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1009:			
        -: 1010:      //each other player gains a copy of revealed card
    #####: 1011:      for (i = 0; i < state->numPlayers; i++)
        -: 1012:	{
    #####: 1013:	  if (i != currentPlayer)
        -: 1014:	    {
    #####: 1015:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1016:	    }
        -: 1017:	}
        -: 1018:
        -: 1019:      //discard played card from hand
    #####: 1020:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1021:
        -: 1022:      //trash copies of cards returned to supply
    #####: 1023:      for (j = 0; j < choice2; j++)
        -: 1024:	{
    #####: 1025:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1026:	    {
    #####: 1027:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1028:		{
    #####: 1029:		  discardCard(i, currentPlayer, state, 1);
    #####: 1030:		  break;
        -: 1031:		}
        -: 1032:	    }
        -: 1033:	}			
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:		
    #####: 1037:    case cutpurse:
        -: 1038:
    #####: 1039:      updateCoins(currentPlayer, state, 2);
    #####: 1040:      for (i = 0; i < state->numPlayers; i++)
        -: 1041:	{
    #####: 1042:	  if (i != currentPlayer)
        -: 1043:	    {
    #####: 1044:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1045:		{
    #####: 1046:		  if (state->hand[i][j] == copper)
        -: 1047:		    {
    #####: 1048:		      discardCard(j, i, state, 0);
    #####: 1049:		      break;
        -: 1050:		    }
    #####: 1051:		  if (j == state->handCount[i])
        -: 1052:		    {
    #####: 1053:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1054:			{
        -: 1055:			  if (DEBUG)
        -: 1056:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1057:			}	
    #####: 1058:		      break;
        -: 1059:		    }		
        -: 1060:		}
        -: 1061:					
        -: 1062:	    }
        -: 1063:				
        -: 1064:	}				
        -: 1065:
        -: 1066:      //discard played card from hand
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1068:
    #####: 1069:      return 0;
        -: 1070:
        -: 1071:		
    #####: 1072:    case embargo: 
        -: 1073:      //+2 Coins
    #####: 1074:      state->coins = state->coins + 2;
        -: 1075:			
        -: 1076:      //see if selected pile is in play
    #####: 1077:      if ( state->supplyCount[choice1] == -1 )
        -: 1078:	{
    #####: 1079:	  return -1;
        -: 1080:	}
        -: 1081:			
        -: 1082:      //add embargo token to selected supply pile
    #####: 1083:      state->embargoTokens[choice1]++;
        -: 1084:			
        -: 1085:      //trash card
    #####: 1086:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1087:      return 0;
        -: 1088:		
    #####: 1089:    case outpost:
        -: 1090:      //set outpost flag
    #####: 1091:      state->outpostPlayed++;
        -: 1092:			
        -: 1093:      //discard card
    #####: 1094:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1095:      return 0;
        -: 1096:		
    #####: 1097:    case salvager:
        -: 1098:      //+1 buy
    #####: 1099:      state->numBuys++;
        -: 1100:			
    #####: 1101:      if (choice1)
        -: 1102:	{
        -: 1103:	  //gain coins equal to trashed card
    #####: 1104:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1105:	  //trash card
    #####: 1106:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1107:	}
        -: 1108:			
        -: 1109:      //discard card
    #####: 1110:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1111:      return 0;
        -: 1112:		
    #####: 1113:    case sea_hag:
    #####: 1114:      for (i = 0; i < state->numPlayers; i++){
    #####: 1115:	if (i != currentPlayer){
    #####: 1116:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1117:	  state->discardCount[i]++;
    #####: 1118:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1119:	}
        -: 1120:      }
    #####: 1121:      return 0;
        -: 1122:		
    #####: 1123:    case treasure_map:
        -: 1124:      //search hand for another treasure_map
    #####: 1125:      index = -1;
    #####: 1126:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1127:	{
    #####: 1128:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1129:	    {
    #####: 1130:	      index = i;
    #####: 1131:	      break;
        -: 1132:	    }
        -: 1133:	}
    #####: 1134:      if (index > -1)
        -: 1135:	{
        -: 1136:	  //trash both treasure cards
    #####: 1137:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1138:	  discardCard(index, currentPlayer, state, 1);
        -: 1139:
        -: 1140:	  //gain 4 Gold cards
    #####: 1141:	  for (i = 0; i < 4; i++)
        -: 1142:	    {
    #####: 1143:	      gainCard(gold, state, 1, currentPlayer);
        -: 1144:	    }
        -: 1145:				
        -: 1146:	  //return success
    #####: 1147:	  return 1;
        -: 1148:	}
        -: 1149:			
        -: 1150:      //no second treasure_map found in hand
    #####: 1151:      return -1;
        -: 1152:    }
        -: 1153:	
    #####: 1154:  return -1;
        -: 1155:}
        -: 1156:
        6: 1157:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1158:{
        -: 1159:	
        -: 1160:  //if card is not trashed, added to Played pile 
        6: 1161:  if (trashFlag < 1)
        -: 1162:    {
        -: 1163:      //add card to played pile
        6: 1164:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1165:      state->playedCardCount++;
        -: 1166:    }
        -: 1167:	
        -: 1168:  //set played card to -1
        6: 1169:  state->hand[currentPlayer][handPos] = -1;
        -: 1170:	
        -: 1171:  //remove card from player's hand
        6: 1172:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1173:    {
        -: 1174:      //reduce number of cards in hand
    #####: 1175:      state->handCount[currentPlayer]--;
        -: 1176:    }
        6: 1177:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1178:    {
        -: 1179:      //reduce number of cards in hand
    #####: 1180:      state->handCount[currentPlayer]--;
        -: 1181:    }
        -: 1182:  else 	
        -: 1183:    {
        -: 1184:      //replace discarded card with last card in hand
        6: 1185:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1186:      //set last card to -1
        6: 1187:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1188:      //reduce number of cards in hand
        6: 1189:      state->handCount[currentPlayer]--;
        -: 1190:    }
        -: 1191:	
        6: 1192:  return 0;
        -: 1193:}
        -: 1194:
      107: 1195:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1196:{
        -: 1197:  //Note: supplyPos is enum of choosen card
        -: 1198:	
        -: 1199:  //check if supply pile is empty (0) or card is not used in game (-1)
      107: 1200:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1201:    {
    #####: 1202:      return -1;
        -: 1203:    }
        -: 1204:	
        -: 1205:  //added card for [whoseTurn] current player:
        -: 1206:  // toFlag = 0 : add to discard
        -: 1207:  // toFlag = 1 : add to deck
        -: 1208:  // toFlag = 2 : add to hand
        -: 1209:
      107: 1210:  if (toFlag == 1)
        -: 1211:    {
    #####: 1212:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1213:      state->deckCount[player]++;
        -: 1214:    }
      107: 1215:  else if (toFlag == 2)
        -: 1216:    {
    #####: 1217:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1218:      state->handCount[player]++;
        -: 1219:    }
        -: 1220:  else
        -: 1221:    {
      107: 1222:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      107: 1223:      state->discardCount[player]++;
        -: 1224:    }
        -: 1225:	
        -: 1226:  //decrease number in supply pile
      107: 1227:  state->supplyCount[supplyPos]--;
        -: 1228:	 
      107: 1229:  return 0;
        -: 1230:}
        -: 1231:
      129: 1232:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1233:{
        -: 1234:  int i;
        -: 1235:	
        -: 1236:  //reset coin count
      129: 1237:  state->coins = 0;
        -: 1238:
        -: 1239:  //add coins for each Treasure card in player's hand
      812: 1240:  for (i = 0; i < state->handCount[player]; i++)
        -: 1241:    {
      683: 1242:      if (state->hand[player][i] == copper)
        -: 1243:	{
      302: 1244:	  state->coins += 1;
        -: 1245:	}
      381: 1246:      else if (state->hand[player][i] == silver)
        -: 1247:	{
      151: 1248:	  state->coins += 2;
        -: 1249:	}
      230: 1250:      else if (state->hand[player][i] == gold)
        -: 1251:	{
       43: 1252:	  state->coins += 3;
        -: 1253:	}	
        -: 1254:    }	
        -: 1255:
        -: 1256:  //add bonus
      129: 1257:  state->coins += bonus;
        -: 1258:
      129: 1259:  return 0;
        -: 1260:}
        -: 1261:
        -: 1262:
        -: 1263://end of dominion.c
        -: 1264:
        -: 1265:// refactored for assignment 2 - mb
        6: 1266:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1267:{
        -: 1268:      //+3 Cards
        -: 1269:      int i;
       24: 1270:      for (i = 0; i < 3; i++)
        -: 1271:	{
       18: 1272:	  drawCard(currentPlayer, state);
        -: 1273:	}
        -: 1274:			
        -: 1275:      //discard card from hand
        6: 1276:      discardCard(handPos, currentPlayer, state, 0);
        -: 1277:
        6: 1278:      return 0;
        -: 1279:}
        -: 1280:
        -: 1281:// refactored for assignment 2 - mb
       13: 1282:int playAdventurer(int currentPlayer, struct gameState *state, int cardDrawn, int drawntreasure, int temphand[], int z)
        -: 1283:{
       55: 1284:        while(drawntreasure<2){
       29: 1285:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        2: 1286:	  shuffle(currentPlayer, state);
        -: 1287:	}
       29: 1288:	drawCard(currentPlayer, state);
       29: 1289:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       29: 1290:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       26: 1291:	  drawntreasure++;
        -: 1292:	else{
        3: 1293:	  temphand[z]=cardDrawn;
        3: 1294:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1295:	  z++;
        -: 1296:	}
        -: 1297:      }
       29: 1298:      while(z-1>=0){
        3: 1299:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3: 1300:	z=z-1;
        -: 1301:      }
        -: 1302:
       13: 1303:  return 0;
        -: 1304:}
        -: 1305:
    #####: 1306:int playFeast(struct gameState *state, int currentPlayer, int temphand[], int choice1)
        -: 1307:{
        -: 1308:       //gain card with cost up to 5
        -: 1309:      //Backup hand
        -: 1310:      int i, x;
    #####: 1311:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1312:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1313:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1314:      }
        -: 1315:      //Backup hand
        -: 1316:
        -: 1317:      //Update Coins for Buy
    #####: 1318:      updateCoins(currentPlayer, state, 5);
    #####: 1319:      x = 1;//Condition to loop on
    #####: 1320:      while( x == 1) {//Buy one card
    #####: 1321:	if (supplyCount(choice1, state) <= 0){
        -: 1322:	  if (DEBUG)
        -: 1323:	    printf("None of that card left, sorry!\n");
        -: 1324:
        -: 1325:	  if (DEBUG){
        -: 1326:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1327:	  }
        -: 1328:	}
    #####: 1329:	else if (state->coins < getCost(choice1)){
    #####: 1330:	  printf("That card is too expensive!\n");
        -: 1331:
        -: 1332:	  if (DEBUG){
        -: 1333:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1334:	  }
        -: 1335:	}
        -: 1336:	else{
        -: 1337:
        -: 1338:	  if (DEBUG){
        -: 1339:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1340:	  }
        -: 1341:
    #####: 1342:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1343:	  x = 0;//No more buying cards
        -: 1344:
        -: 1345:	  if (DEBUG){
        -: 1346:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1347:	  }
        -: 1348:
        -: 1349:	}
        -: 1350:      }     
        -: 1351:
        -: 1352:      //Reset Hand
    #####: 1353:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1354:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1355:	temphand[i] = -1;
        -: 1356:      }
        -: 1357:      //Reset Hand
        -: 1358:      			
    #####: 1359:      return 0;			
        -: 1360:}
        -: 1361:
        -: 1362:
    #####: 1363:int playTribute(struct gameState *state, int nextPlayer, int currentPlayer)
        -: 1364:{
    #####: 1365:   int tributeRevealedCards[2] = {-1, -1};
        -: 1366:   int i;
    #####: 1367:       if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1368:	if (state->deckCount[nextPlayer] > 0){
    #####: 1369:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1370:	  state->deckCount[nextPlayer]--;
        -: 1371:	}
    #####: 1372:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1373:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1374:	  state->discardCount[nextPlayer]--;
        -: 1375:	}
        -: 1376:	else{
        -: 1377:	  //No Card to Reveal
        -: 1378:	  if (DEBUG){
        -: 1379:	    printf("No cards to reveal\n");
        -: 1380:	  }
        -: 1381:	}
        -: 1382:      }
        -: 1383:	    
        -: 1384:      else{
    #####: 1385:	if (state->deckCount[nextPlayer] == 0){
    #####: 1386:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1387:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1388:	    state->deckCount[nextPlayer]++;
    #####: 1389:	    state->discard[nextPlayer][i] = -1;
    #####: 1390:	    state->discardCount[nextPlayer]--;
        -: 1391:	  }
        -: 1392:			    
    #####: 1393:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1394:	} 
    #####: 1395:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1396:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1397:	state->deckCount[nextPlayer]--;
    #####: 1398:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1399:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1400:	state->deckCount[nextPlayer]--;
        -: 1401:      }    
        -: 1402:		       
    #####: 1403:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1404:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1405:	state->playedCardCount++;
    #####: 1406:	tributeRevealedCards[1] = -1;
        -: 1407:      }
        -: 1408:
    #####: 1409:      for (i = 0; i <= 2; i ++){
    #####: 1410:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1411:	  state->coins += 2;
        -: 1412:	}
        -: 1413:		    
    #####: 1414:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1415:	  drawCard(currentPlayer, state);
    #####: 1416:	  drawCard(currentPlayer, state);
        -: 1417:	}
        -: 1418:	else{//Action Card
    #####: 1419:	  state->numActions = state->numActions + 2;
        -: 1420:	}
        -: 1421:      }
        -: 1422:	    
    #####: 1423:      return 0;
        -: 1424:}
