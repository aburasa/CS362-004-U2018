        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int playSmithy(int currentPlayer, struct gameState *state, int handPos);
        -:    9:int playAdventurer(int currentPlayer, struct gameState *state, int cardDrawn, int drawntreasure, int temphand[], int z);
        -:   10:int playFeast(struct gameState *state, int currentPlayer, int temphand[], int choice1);
        -:   11:int playTribute(struct gameState *state, int nextPlayer, int currentPlayer);
        -:   12:int playBaron(struct gameState *state, int choice1, int currentPlayer);
        -:   13:
     3180:   14:int compare(const void* a, const void* b) {
     3180:   15:  if (*(int*)a > *(int*)b)
     1510:   16:    return 1;
     1670:   17:  if (*(int*)a < *(int*)b)
      477:   18:    return -1;
     1193:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
        5:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
        5:   50:  SelectStream(1);
        5:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
        5:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
        5:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
       55:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
      550:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
      500:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
        5:   79:  if (numPlayers == 2)
        -:   80:    {
        5:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
    #####:   83:  else if (numPlayers == 3)
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
        5:   93:  if (numPlayers == 2)
        -:   94:    {
        5:   95:      state->supplyCount[estate] = 8;
        5:   96:      state->supplyCount[duchy] = 8;
        5:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
    #####:  101:      state->supplyCount[estate] = 12;
    #####:  102:      state->supplyCount[duchy] = 12;
    #####:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
        5:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  108:  state->supplyCount[silver] = 40;
        5:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
      105:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
      825:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
      775:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
       50:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
       10:  121:		  if (numPlayers == 2){ 
        5:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
    #####:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
       45:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
       50:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
      725:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       15:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
       10:  146:      state->deckCount[i] = 0;
       40:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
       30:  149:	  state->deck[i][j] = estate;
       30:  150:	  state->deckCount[i]++;
        -:  151:	}
       80:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
       70:  154:	  state->deck[i][j] = copper;
       70:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
       15:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
       10:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
       15:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
       10:  172:      state->handCount[i] = 0;
       10:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
      140:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
      135:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
        5:  188:  state->outpostPlayed = 0;
        5:  189:  state->phase = 0;
        5:  190:  state->numActions = 1;
        5:  191:  state->numBuys = 1;
        5:  192:  state->playedCardCount = 0;
        5:  193:  state->whoseTurn = 0;
        5:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       30:  198:  for (it = 0; it < 5; it++){
       25:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
        5:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
        5:  204:  return 0;
        -:  205:}
        -:  206:
       81:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
       81:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
       81:  215:  if (state->deckCount[player] < 1)
        3:  216:    return -1;
       78:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
     1297:  220:  while (state->deckCount[player] > 0) {
     1141:  221:    card = floor(Random() * state->deckCount[player]);
     1141:  222:    newDeck[newDeckPos] = state->deck[player][card];
     1141:  223:    newDeckPos++;
     5526:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
     4385:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
     1141:  227:    state->deckCount[player]--;
        -:  228:  }
     1219:  229:  for (i = 0; i < newDeckPos; i++) {
     1141:  230:    state->deck[player][i] = newDeck[i];
     1141:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
       78:  234:  return 0;
        -:  235:}
        -:  236:
      208:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
      208:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
      208:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
      208:  249:  if ( state->numActions < 1 )
        -:  250:    {
      175:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
       33:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
       33:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
       33:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
       33:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
       33:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
       33:  275:  return 0;
        -:  276:}
        -:  277:
      180:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
      180:  286:  who = state->whoseTurn;
        -:  287:
      180:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
      180:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
      180:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
      180:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
      180:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
      180:  305:    state->coins = (state->coins) - (getCost(supplyPos));
      180:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
      180:  314:  return 0;
        -:  315:}
        -:  316:
     1344:  317:int numHandCards(struct gameState *state) {
     1344:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
     2681:  321:int handCard(int handPos, struct gameState *state) {
     2681:  322:  int currentPlayer = whoseTurn(state);
     2681:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
      360:  326:int supplyCount(int card, struct gameState *state) {
      360:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
     4418:  352:int whoseTurn(struct gameState *state) {
     4418:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
      180:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
      180:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
     1146:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      966:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      966:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
      180:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
      180:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
       92:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
       88:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
      180:  376:  state->outpostPlayed = 0;
      180:  377:  state->phase = 0;
      180:  378:  state->numActions = 1;
      180:  379:  state->coins = 0;
      180:  380:  state->numBuys = 1;
      180:  381:  state->playedCardCount = 0;
      180:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
     1080:  386:  for (k = 0; k < 5; k++){
      900:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
      180:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
      180:  393:  return 0;
        -:  394:}
        -:  395:
      185:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
      185:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
        5:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
      180:  407:  j = 0;
     4680:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
     4500:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
      180:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
      180:  420:  return 0;
        -:  421:}
        -:  422:
       10:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
       10:  426:  int score = 0;
        -:  427:  //score from hand
       35:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
       25:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
       25:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
       25:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
       25:  433:      if (state->hand[player][i] == province) { score = score + 6; };
       25:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       25:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
      122:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
      112:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
      112:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
      112:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
      112:  444:      if (state->discard[player][i] == province) { score = score + 6; };
      112:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
      112:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
      122:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
      112:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
      112:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
      112:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
      112:  455:      if (state->deck[player][i] == province) { score = score + 6; };
      112:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
      112:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
       10:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     1008:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     1008:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
     1109:  539:    for (i = 0; i < state->discardCount[player];i++){
     1041:  540:      state->deck[player][i] = state->discard[player][i];
     1041:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
       68:  544:    state->deckCount[player] = state->discardCount[player];
       68:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
       68:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
       68:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
       68:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
       68:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
       68:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
       68:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       68:  569:    state->deckCount[player]--;
       68:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
      940:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
      940:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
      940:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      940:  582:    state->deckCount[player]--;
      940:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     1008:  586:  return 0;
        -:  587:}
        -:  588:
      360:  589:int getCost(int cardNumber)
        -:  590:{
      360:  591:  switch( cardNumber ) 
        -:  592:    {
    #####:  593:    case curse:
    #####:  594:      return 0;
    #####:  595:    case estate:
    #####:  596:      return 2;
    #####:  597:    case duchy:
    #####:  598:      return 5;
       80:  599:    case province:
       80:  600:      return 8;
    #####:  601:    case copper:
    #####:  602:      return 0;
      144:  603:    case silver:
      144:  604:      return 3;
       96:  605:    case gold:
       96:  606:      return 6;
       20:  607:    case adventurer:
       20:  608:      return 6;
    #####:  609:    case council_room:
    #####:  610:      return 5;
    #####:  611:    case feast:
    #####:  612:      return 4;
    #####:  613:    case gardens:
    #####:  614:      return 4;
    #####:  615:    case mine:
    #####:  616:      return 5;
    #####:  617:    case remodel:
    #####:  618:      return 4;
       20:  619:    case smithy:
       20:  620:      return 4;
    #####:  621:    case village:
    #####:  622:      return 3;
    #####:  623:    case baron:
    #####:  624:      return 4;
    #####:  625:    case great_hall:
    #####:  626:      return 3;
    #####:  627:    case minion:
    #####:  628:      return 5;
    #####:  629:    case steward:
    #####:  630:      return 3;
    #####:  631:    case tribute:
    #####:  632:      return 5;
    #####:  633:    case ambassador:
    #####:  634:      return 3;
    #####:  635:    case cutpurse:
    #####:  636:      return 4;
    #####:  637:    case embargo: 
    #####:  638:      return 2;
    #####:  639:    case outpost:
    #####:  640:      return 5;
    #####:  641:    case salvager:
    #####:  642:      return 4;
    #####:  643:    case sea_hag:
    #####:  644:      return 4;
    #####:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
       33:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  //int x;
        -:  658:  int index;
       33:  659:  int currentPlayer = whoseTurn(state);
       33:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
        -:  662:  int temphand[MAX_HAND];// moved above the if statement
       33:  663:  int drawntreasure=0;
       33:  664:  int cardDrawn = 0;
       33:  665:  int z = 0;// this is the counter for the temp hand
       33:  666:  if (nextPlayer > (state->numPlayers - 1)){
       23:  667:    nextPlayer = 0;
        -:  668:  }
        -:  669:  
        -:  670:	
        -:  671:  //uses switch to select card and perform actions
       33:  672:  switch( card ) 
        -:  673:    {
       23:  674:    case adventurer:
       23:  675:      return playAdventurer(currentPlayer, state, cardDrawn, drawntreasure, temphand, z);
        -:  676:			
    #####:  677:    case council_room:
        -:  678:      //+4 Cards
    #####:  679:      for (i = 0; i < 4; i++)
        -:  680:	{
    #####:  681:	  drawCard(currentPlayer, state);
        -:  682:	}
        -:  683:			
        -:  684:      //+1 Buy
    #####:  685:      state->numBuys++;
        -:  686:			
        -:  687:      //Each other player draws a card
    #####:  688:      for (i = 0; i < state->numPlayers; i++)
        -:  689:	{
    #####:  690:	  if ( i != currentPlayer )
        -:  691:	    {
    #####:  692:	      drawCard(i, state);
        -:  693:	    }
        -:  694:	}
        -:  695:			
        -:  696:      //put played card in played card pile
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
        -:  698:			
    #####:  699:      return 0;
        -:  700:			
    #####:  701:    case feast:
    #####:  702:      return playFeast(state, currentPlayer, temphand, choice1);
        -:  703:    
    #####:  704:    case gardens:
    #####:  705:      return -1;
        -:  706:			
    #####:  707:    case mine:
    #####:  708:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  709:
    #####:  710:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  711:	{
    #####:  712:	  return -1;
        -:  713:	}
        -:  714:		
    #####:  715:      if (choice2 > treasure_map || choice2 < curse)
        -:  716:	{
    #####:  717:	  return -1;
        -:  718:	}
        -:  719:
    #####:  720:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  721:	{
    #####:  722:	  return -1;
        -:  723:	}
        -:  724:
    #####:  725:      gainCard(choice2, state, 2, currentPlayer);
        -:  726:
        -:  727:      //discard card from hand
    #####:  728:      discardCard(handPos, currentPlayer, state, 0);
        -:  729:
        -:  730:      //discard trashed card
    #####:  731:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  732:	{
    #####:  733:	  if (state->hand[currentPlayer][i] == j)
        -:  734:	    {
    #####:  735:	      discardCard(i, currentPlayer, state, 0);			
    #####:  736:	      break;
        -:  737:	    }
        -:  738:	}
        -:  739:			
    #####:  740:      return 0;
        -:  741:			
    #####:  742:    case remodel:
    #####:  743:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  744:
    #####:  745:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      gainCard(choice2, state, 0, currentPlayer);
        -:  751:
        -:  752:      //discard card from hand
    #####:  753:      discardCard(handPos, currentPlayer, state, 0);
        -:  754:
        -:  755:      //discard trashed card
    #####:  756:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  757:	{
    #####:  758:	  if (state->hand[currentPlayer][i] == j)
        -:  759:	    {
    #####:  760:	      discardCard(i, currentPlayer, state, 0);			
    #####:  761:	      break;
        -:  762:	    }
        -:  763:	}
        -:  764:
        -:  765:
    #####:  766:      return 0;
        -:  767:		
       10:  768:    case smithy:
       10:  769:      return playSmithy(currentPlayer, state, handPos);
        -:  770:		
    #####:  771:    case village:
        -:  772:      //+1 Card
    #####:  773:      drawCard(currentPlayer, state);
        -:  774:			
        -:  775:      //+2 Actions
    #####:  776:      state->numActions = state->numActions + 2;
        -:  777:			
        -:  778:      //discard played card from hand
    #####:  779:      discardCard(handPos, currentPlayer, state, 0);
    #####:  780:      return 0;
        -:  781:		
    #####:  782:    case baron:
    #####:  783:      return playBaron(state, choice1, currentPlayer);
        -:  784:/*
        -:  785:		
        -:  786:    case great_hall:
        -:  787:      //+1 Card
        -:  788:      drawCard(currentPlayer, state);
        -:  789:			
        -:  790:      //+1 Actions
        -:  791:      state->numActions++;
        -:  792:			
        -:  793:      //discard card from hand
        -:  794:      discardCard(handPos, currentPlayer, state, 0);
        -:  795:      return 0;
        -:  796:		
        -:  797:    case minion:
        -:  798:      //+1 action
        -:  799:      state->numActions++;
        -:  800:			
        -:  801:      //discard card from hand
        -:  802:      discardCard(handPos, currentPlayer, state, 0);
        -:  803:			
        -:  804:      if (choice1)		//+2 coins
        -:  805:	{
        -:  806:	  state->coins = state->coins + 2;
        -:  807:	}
        -:  808:			
        -:  809:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  810:	{
        -:  811:	  //discard hand
        -:  812:	  while(numHandCards(state) > 0)
        -:  813:	    {
        -:  814:	      discardCard(handPos, currentPlayer, state, 0);
        -:  815:	    }
        -:  816:				
        -:  817:	  //draw 4
        -:  818:	  for (i = 0; i < 4; i++)
        -:  819:	    {
        -:  820:	      drawCard(currentPlayer, state);
        -:  821:	    }
        -:  822:				
        -:  823:	  //other players discard hand and redraw if hand size > 4
        -:  824:	  for (i = 0; i < state->numPlayers; i++)
        -:  825:	    {
        -:  826:	      if (i != currentPlayer)
        -:  827:		{
        -:  828:		  if ( state->handCount[i] > 4 )
        -:  829:		    {
        -:  830:		      //discard hand
        -:  831:		      while( state->handCount[i] > 0 )
        -:  832:			{
        -:  833:			  discardCard(handPos, i, state, 0);
        -:  834:			}
        -:  835:							
        -:  836:		      //draw 4
        -:  837:		      for (j = 0; j < 4; j++)
        -:  838:			{
        -:  839:			  drawCard(i, state);
        -:  840:			}
        -:  841:		    }
        -:  842:		}
        -:  843:	    }
        -:  844:				
        -:  845:	}
        -:  846:      return 0;
        -:  847:		*/
    #####:  848:    case steward:
    #####:  849:      if (choice1 == 1)
        -:  850:	{
        -:  851:	  //+2 cards
    #####:  852:	  drawCard(currentPlayer, state);
    #####:  853:	  drawCard(currentPlayer, state);
        -:  854:	}
    #####:  855:      else if (choice1 == 2)
        -:  856:	{
        -:  857:	  //+2 coins
    #####:  858:	  state->coins = state->coins + 2;
        -:  859:	}
        -:  860:      else
        -:  861:	{
        -:  862:	  //trash 2 cards in hand
    #####:  863:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  864:	  discardCard(choice3, currentPlayer, state, 1);
        -:  865:	}
        -:  866:			
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
    #####:  869:      return 0;
        -:  870:		
    #####:  871:    case tribute:
    #####:  872:		  return playTribute(state, nextPlayer, currentPlayer);
        -:  873:
    #####:  874:    case ambassador:
    #####:  875:      j = 0;		//used to check if player has enough cards to discard
        -:  876:
    #####:  877:      if (choice2 > 2 || choice2 < 0)
        -:  878:	{
    #####:  879:	  return -1;				
        -:  880:	}
        -:  881:
    #####:  882:      if (choice1 == handPos)
        -:  883:	{
    #####:  884:	  return -1;
        -:  885:	}
        -:  886:
    #####:  887:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  888:	{
    #####:  889:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  890:	    {
    #####:  891:	      j++;
        -:  892:	    }
        -:  893:	}
    #####:  894:      if (j < choice2)
        -:  895:	{
    #####:  896:	  return -1;				
        -:  897:	}
        -:  898:
        -:  899:      if (DEBUG) 
        -:  900:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  901:
        -:  902:      //increase supply count for choosen card by amount being discarded
    #####:  903:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  904:			
        -:  905:      //each other player gains a copy of revealed card
    #####:  906:      for (i = 0; i < state->numPlayers; i++)
        -:  907:	{
    #####:  908:	  if (i != currentPlayer)
        -:  909:	    {
    #####:  910:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  911:	    }
        -:  912:	}
        -:  913:
        -:  914:      //discard played card from hand
    #####:  915:      discardCard(handPos, currentPlayer, state, 0);			
        -:  916:
        -:  917:      //trash copies of cards returned to supply
    #####:  918:      for (j = 0; j < choice2; j++)
        -:  919:	{
    #####:  920:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  921:	    {
    #####:  922:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  923:		{
    #####:  924:		  discardCard(i, currentPlayer, state, 1);
    #####:  925:		  break;
        -:  926:		}
        -:  927:	    }
        -:  928:	}			
        -:  929:
    #####:  930:      return 0;
        -:  931:		
    #####:  932:    case cutpurse:
        -:  933:
    #####:  934:      updateCoins(currentPlayer, state, 2);
    #####:  935:      for (i = 0; i < state->numPlayers; i++)
        -:  936:	{
    #####:  937:	  if (i != currentPlayer)
        -:  938:	    {
    #####:  939:	      for (j = 0; j < state->handCount[i]; j++)
        -:  940:		{
    #####:  941:		  if (state->hand[i][j] == copper)
        -:  942:		    {
    #####:  943:		      discardCard(j, i, state, 0);
    #####:  944:		      break;
        -:  945:		    }
    #####:  946:		  if (j == state->handCount[i])
        -:  947:		    {
    #####:  948:		      for (k = 0; k < state->handCount[i]; k++)
        -:  949:			{
        -:  950:			  if (DEBUG)
        -:  951:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  952:			}	
    #####:  953:		      break;
        -:  954:		    }		
        -:  955:		}
        -:  956:					
        -:  957:	    }
        -:  958:				
        -:  959:	}				
        -:  960:
        -:  961:      //discard played card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);			
        -:  963:
    #####:  964:      return 0;
        -:  965:
        -:  966:		
    #####:  967:    case embargo: 
        -:  968:      //+2 Coins
    #####:  969:      state->coins = state->coins + 2;
        -:  970:			
        -:  971:      //see if selected pile is in play
    #####:  972:      if ( state->supplyCount[choice1] == -1 )
        -:  973:	{
    #####:  974:	  return -1;
        -:  975:	}
        -:  976:			
        -:  977:      //add embargo token to selected supply pile
    #####:  978:      state->embargoTokens[choice1]++;
        -:  979:			
        -:  980:      //trash card
    #####:  981:      discardCard(handPos, currentPlayer, state, 1);		
    #####:  982:      return 0;
        -:  983:		
    #####:  984:    case outpost:
        -:  985:      //set outpost flag
    #####:  986:      state->outpostPlayed++;
        -:  987:			
        -:  988:      //discard card
    #####:  989:      discardCard(handPos, currentPlayer, state, 0);
    #####:  990:      return 0;
        -:  991:		
    #####:  992:    case salvager:
        -:  993:      //+1 buy
    #####:  994:      state->numBuys++;
        -:  995:			
    #####:  996:      if (choice1)
        -:  997:	{
        -:  998:	  //gain coins equal to trashed card
    #####:  999:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1000:	  //trash card
    #####: 1001:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1002:	}
        -: 1003:			
        -: 1004:      //discard card
    #####: 1005:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1006:      return 0;
        -: 1007:		
    #####: 1008:    case sea_hag:
    #####: 1009:      for (i = 0; i < state->numPlayers; i++){
    #####: 1010:	if (i != currentPlayer){
    #####: 1011:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1012:	  state->discardCount[i]++;
    #####: 1013:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1014:	}
        -: 1015:      }
    #####: 1016:      return 0;
        -: 1017:		
    #####: 1018:    case treasure_map:
        -: 1019:      //search hand for another treasure_map
    #####: 1020:      index = -1;
    #####: 1021:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1022:	{
    #####: 1023:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1024:	    {
    #####: 1025:	      index = i;
    #####: 1026:	      break;
        -: 1027:	    }
        -: 1028:	}
    #####: 1029:      if (index > -1)
        -: 1030:	{
        -: 1031:	  //trash both treasure cards
    #####: 1032:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1033:	  discardCard(index, currentPlayer, state, 1);
        -: 1034:
        -: 1035:	  //gain 4 Gold cards
    #####: 1036:	  for (i = 0; i < 4; i++)
        -: 1037:	    {
    #####: 1038:	      gainCard(gold, state, 1, currentPlayer);
        -: 1039:	    }
        -: 1040:				
        -: 1041:	  //return success
    #####: 1042:	  return 1;
        -: 1043:	}
        -: 1044:			
        -: 1045:      //no second treasure_map found in hand
    #####: 1046:      return -1;
        -: 1047:    }
        -: 1048:	
    #####: 1049:  return -1;
        -: 1050:}
        -: 1051:
       10: 1052:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1053:{
        -: 1054:	
        -: 1055:  //if card is not trashed, added to Played pile 
       10: 1056:  if (trashFlag < 1)
        -: 1057:    {
        -: 1058:      //add card to played pile
       10: 1059:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       10: 1060:      state->playedCardCount++;
        -: 1061:    }
        -: 1062:	
        -: 1063:  //set played card to -1
       10: 1064:  state->hand[currentPlayer][handPos] = -1;
        -: 1065:	
        -: 1066:  //remove card from player's hand
       10: 1067:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1068:    {
        -: 1069:      //reduce number of cards in hand
    #####: 1070:      state->handCount[currentPlayer]--;
        -: 1071:    }
       10: 1072:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1073:    {
        -: 1074:      //reduce number of cards in hand
    #####: 1075:      state->handCount[currentPlayer]--;
        -: 1076:    }
        -: 1077:  else 	
        -: 1078:    {
        -: 1079:      //replace discarded card with last card in hand
       10: 1080:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1081:      //set last card to -1
       10: 1082:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1083:      //reduce number of cards in hand
       10: 1084:      state->handCount[currentPlayer]--;
        -: 1085:    }
        -: 1086:	
       10: 1087:  return 0;
        -: 1088:}
        -: 1089:
      180: 1090:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1091:{
        -: 1092:  //Note: supplyPos is enum of choosen card
        -: 1093:	
        -: 1094:  //check if supply pile is empty (0) or card is not used in game (-1)
      180: 1095:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1096:    {
    #####: 1097:      return -1;
        -: 1098:    }
        -: 1099:	
        -: 1100:  //added card for [whoseTurn] current player:
        -: 1101:  // toFlag = 0 : add to discard
        -: 1102:  // toFlag = 1 : add to deck
        -: 1103:  // toFlag = 2 : add to hand
        -: 1104:
      180: 1105:  if (toFlag == 1)
        -: 1106:    {
    #####: 1107:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1108:      state->deckCount[player]++;
        -: 1109:    }
      180: 1110:  else if (toFlag == 2)
        -: 1111:    {
    #####: 1112:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1113:      state->handCount[player]++;
        -: 1114:    }
        -: 1115:  else
        -: 1116:    {
      180: 1117:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      180: 1118:      state->discardCount[player]++;
        -: 1119:    }
        -: 1120:	
        -: 1121:  //decrease number in supply pile
      180: 1122:  state->supplyCount[supplyPos]--;
        -: 1123:	 
      180: 1124:  return 0;
        -: 1125:}
        -: 1126:
      218: 1127:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1128:{
        -: 1129:  int i;
        -: 1130:	
        -: 1131:  //reset coin count
      218: 1132:  state->coins = 0;
        -: 1133:
        -: 1134:  //add coins for each Treasure card in player's hand
     1374: 1135:  for (i = 0; i < state->handCount[player]; i++)
        -: 1136:    {
     1156: 1137:      if (state->hand[player][i] == copper)
        -: 1138:	{
      507: 1139:	  state->coins += 1;
        -: 1140:	}
      649: 1141:      else if (state->hand[player][i] == silver)
        -: 1142:	{
      250: 1143:	  state->coins += 2;
        -: 1144:	}
      399: 1145:      else if (state->hand[player][i] == gold)
        -: 1146:	{
       78: 1147:	  state->coins += 3;
        -: 1148:	}	
        -: 1149:    }	
        -: 1150:
        -: 1151:  //add bonus
      218: 1152:  state->coins += bonus;
        -: 1153:
      218: 1154:  return 0;
        -: 1155:}
        -: 1156:
        -: 1157:
        -: 1158://end of dominion.c
        -: 1159:
        -: 1160:// refactored for assignment 2 - mb
       10: 1161:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1162:{
        -: 1163:      //+3 Cards
        -: 1164:      int i;
       40: 1165:      for (i = 0; i < 3; i++)
        -: 1166:	{
       30: 1167:	  drawCard(currentPlayer, state);
        -: 1168:	}
        -: 1169:			
        -: 1170:      //discard card from hand
       10: 1171:      discardCard(handPos, currentPlayer, state, 0);
        -: 1172:
       10: 1173:      return 0;
        -: 1174:}
        -: 1175:
        -: 1176:// refactored for assignment 2 - mb
       23: 1177:int playAdventurer(int currentPlayer, struct gameState *state, int cardDrawn, int drawntreasure, int temphand[], int z)
        -: 1178:{
       99: 1179:        while(drawntreasure<2){
       53: 1180:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        3: 1181:	  shuffle(currentPlayer, state);
        -: 1182:	}
       53: 1183:	drawCard(currentPlayer, state);
       53: 1184:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       53: 1185:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       46: 1186:	  drawntreasure++;
        -: 1187:	else{
        7: 1188:	  temphand[z]=cardDrawn;
        7: 1189:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        7: 1190:	  z++;
        -: 1191:	}
        -: 1192:      }
       53: 1193:      while(z-1>=0){
        7: 1194:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        7: 1195:	z=z-1;
        -: 1196:      }
        -: 1197:
       23: 1198:  return 0;
        -: 1199:}
        -: 1200:
    #####: 1201:int playFeast(struct gameState *state, int currentPlayer, int temphand[], int choice1)
        -: 1202:{
        -: 1203:       //gain card with cost up to 5
        -: 1204:      //Backup hand
        -: 1205:      int i, x;
    #####: 1206:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1207:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1208:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1209:      }
        -: 1210:      //Backup hand
        -: 1211:
        -: 1212:      //Update Coins for Buy
    #####: 1213:      updateCoins(currentPlayer, state, 5);
    #####: 1214:      x = 1;//Condition to loop on
    #####: 1215:      while( x == 1) {//Buy one card
    #####: 1216:	if (supplyCount(choice1, state) <= 0){
        -: 1217:	  if (DEBUG)
        -: 1218:	    printf("None of that card left, sorry!\n");
        -: 1219:
        -: 1220:	  if (DEBUG){
        -: 1221:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1222:	  }
        -: 1223:	}
    #####: 1224:	else if (state->coins < getCost(choice1)){
    #####: 1225:	  printf("That card is too expensive!\n");
        -: 1226:
        -: 1227:	  if (DEBUG){
        -: 1228:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1229:	  }
        -: 1230:	}
        -: 1231:	else{
        -: 1232:
        -: 1233:	  if (DEBUG){
        -: 1234:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1235:	  }
        -: 1236:
    #####: 1237:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1238:	  x = 0;//No more buying cards
        -: 1239:
        -: 1240:	  if (DEBUG){
        -: 1241:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1242:	  }
        -: 1243:
        -: 1244:	}
        -: 1245:      }     
        -: 1246:
        -: 1247:      //Reset Hand
    #####: 1248:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1249:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1250:	temphand[i] = -1;
        -: 1251:      }
        -: 1252:      //Reset Hand
        -: 1253:      			
    #####: 1254:      return 0;			
        -: 1255:}
        -: 1256:
        -: 1257:
    #####: 1258:int playTribute(struct gameState *state, int nextPlayer, int currentPlayer)
        -: 1259:{
    #####: 1260:   int tributeRevealedCards[2] = {-1, -1};
        -: 1261:   int i;
    #####: 1262:       if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1263:	if (state->deckCount[nextPlayer] > 0){
    #####: 1264:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1265:	  state->deckCount[nextPlayer]--;
        -: 1266:	}
    #####: 1267:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1268:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1269:	  state->discardCount[nextPlayer]--;
        -: 1270:	}
        -: 1271:	else{
        -: 1272:	  //No Card to Reveal
        -: 1273:	  if (DEBUG){
        -: 1274:	    printf("No cards to reveal\n");
        -: 1275:	  }
        -: 1276:	}
        -: 1277:      }
        -: 1278:	    
        -: 1279:      else{
    #####: 1280:	if (state->deckCount[nextPlayer] == 0){
    #####: 1281:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1282:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1283:	    state->deckCount[nextPlayer]++;
    #####: 1284:	    state->discard[nextPlayer][i] = -1;
    #####: 1285:	    state->discardCount[nextPlayer]--;
        -: 1286:	  }
        -: 1287:			    
    #####: 1288:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1289:	} 
    #####: 1290:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1291:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1292:	state->deckCount[nextPlayer]--;
    #####: 1293:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1294:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1295:	state->deckCount[nextPlayer]--;
        -: 1296:      }    
        -: 1297:		       
    #####: 1298:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1299:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1300:	state->playedCardCount++;
    #####: 1301:	tributeRevealedCards[1] = -1;
        -: 1302:      }
        -: 1303:
    #####: 1304:      for (i = 0; i <= 2; i ++){
    #####: 1305:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1306:	  state->coins += 2;
        -: 1307:	}
        -: 1308:		    
    #####: 1309:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1310:	  drawCard(currentPlayer, state);
    #####: 1311:	  drawCard(currentPlayer, state);
        -: 1312:	}
        -: 1313:	else{//Action Card
    #####: 1314:	  state->numActions = state->numActions + 2;
        -: 1315:	}
        -: 1316:      }
        -: 1317:	    
    #####: 1318:      return 0;
        -: 1319:}
        -: 1320:
    #####: 1321:int playBaron(struct gameState *state, int choice1, int currentPlayer)
        -: 1322:{
    #####: 1323:        state->numBuys++;//Increase buys by 1!
    #####: 1324:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1325:	int p = 0;//Iterator for hand!
    #####: 1326:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1327:	while(card_not_discarded){
    #####: 1328:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1329:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1330:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1331:	    state->discardCount[currentPlayer]++;
    #####: 1332:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1333:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1334:	    }
    #####: 1335:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1336:	    state->handCount[currentPlayer]--;
    #####: 1337:	    card_not_discarded = 0;//Exit the loop
        -: 1338:	  }
    #####: 1339:	  else if (p > state->handCount[currentPlayer]){
        -: 1340:	    if(DEBUG) {
        -: 1341:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1342:	      printf("Must gain an estate if there are any\n");
        -: 1343:	    }
    #####: 1344:	    if (supplyCount(estate, state) > 0){
    #####: 1345:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1346:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1347:	      if (supplyCount(estate, state) == 0){
    #####: 1348:		isGameOver(state);
        -: 1349:	      }
        -: 1350:	    }
    #####: 1351:	    card_not_discarded = 0;//Exit the loop
        -: 1352:	  }
        -: 1353:			    
        -: 1354:	  else{
    #####: 1355:	    p++;//Next card
        -: 1356:	  }
        -: 1357:	}
        -: 1358:      }
        -: 1359:			    
        -: 1360:      else{
    #####: 1361:	if (supplyCount(estate, state) > 0){
    #####: 1362:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1363:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1364:	  if (supplyCount(estate, state) == 0){
    #####: 1365:	    isGameOver(state);
        -: 1366:	  }
        -: 1367:	}
        -: 1368:      }
        -: 1369:	    
        -: 1370:      
    #####: 1371:      return 0;
        -: 1372:}
